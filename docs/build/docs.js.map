{
  "version": 3,
  "sources": ["../../node_modules/file-saver/src/FileSaver.js", "../../src/constants.ts", "../../src/helpers.ts", "../../src/convert-image-to-dots.ts", "../../src/vertigo.ts", "../../src/convert-image-to-spiral.ts", "../../src/smooth-line.ts", "../../src/spiral.ts", "../../src/demo-helpers.ts", "../../src/generate-random-image.ts", "../src/docs.ts"],
  "sourcesContent": ["/*\n* FileSaver.js\n* A saveAs() FileSaver implementation.\n*\n* By Eli Grey, http://eligrey.com\n*\n* License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)\n* source  : http://purl.eligrey.com/github/FileSaver.js\n*/\n\n// The one and only way of getting global scope in all environments\n// https://stackoverflow.com/q/3277182/1008999\nvar _global = typeof window === 'object' && window.window === window\n  ? window : typeof self === 'object' && self.self === self\n  ? self : typeof global === 'object' && global.global === global\n  ? global\n  : this\n\nfunction bom (blob, opts) {\n  if (typeof opts === 'undefined') opts = { autoBom: false }\n  else if (typeof opts !== 'object') {\n    console.warn('Deprecated: Expected third argument to be a object')\n    opts = { autoBom: !opts }\n  }\n\n  // prepend BOM for UTF-8 XML and text/* types (including HTML)\n  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n  if (opts.autoBom && /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n    return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type })\n  }\n  return blob\n}\n\nfunction download (url, name, opts) {\n  var xhr = new XMLHttpRequest()\n  xhr.open('GET', url)\n  xhr.responseType = 'blob'\n  xhr.onload = function () {\n    saveAs(xhr.response, name, opts)\n  }\n  xhr.onerror = function () {\n    console.error('could not download file')\n  }\n  xhr.send()\n}\n\nfunction corsEnabled (url) {\n  var xhr = new XMLHttpRequest()\n  // use sync to avoid popup blocker\n  xhr.open('HEAD', url, false)\n  try {\n    xhr.send()\n  } catch (e) {}\n  return xhr.status >= 200 && xhr.status <= 299\n}\n\n// `a.click()` doesn't work for all browsers (#465)\nfunction click (node) {\n  try {\n    node.dispatchEvent(new MouseEvent('click'))\n  } catch (e) {\n    var evt = document.createEvent('MouseEvents')\n    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80,\n                          20, false, false, false, false, 0, null)\n    node.dispatchEvent(evt)\n  }\n}\n\n// Detect WebView inside a native macOS app by ruling out all browsers\n// We just need to check for 'Safari' because all other browsers (besides Firefox) include that too\n// https://www.whatismybrowser.com/guides/the-latest-user-agent/macos\nvar isMacOSWebView = _global.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent)\n\nvar saveAs = _global.saveAs || (\n  // probably in some web worker\n  (typeof window !== 'object' || window !== _global)\n    ? function saveAs () { /* noop */ }\n\n  // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView\n  : ('download' in HTMLAnchorElement.prototype && !isMacOSWebView)\n  ? function saveAs (blob, name, opts) {\n    var URL = _global.URL || _global.webkitURL\n    var a = document.createElement('a')\n    name = name || blob.name || 'download'\n\n    a.download = name\n    a.rel = 'noopener' // tabnabbing\n\n    // TODO: detect chrome extensions & packaged apps\n    // a.target = '_blank'\n\n    if (typeof blob === 'string') {\n      // Support regular links\n      a.href = blob\n      if (a.origin !== location.origin) {\n        corsEnabled(a.href)\n          ? download(blob, name, opts)\n          : click(a, a.target = '_blank')\n      } else {\n        click(a)\n      }\n    } else {\n      // Support blobs\n      a.href = URL.createObjectURL(blob)\n      setTimeout(function () { URL.revokeObjectURL(a.href) }, 4E4) // 40s\n      setTimeout(function () { click(a) }, 0)\n    }\n  }\n\n  // Use msSaveOrOpenBlob as a second approach\n  : 'msSaveOrOpenBlob' in navigator\n  ? function saveAs (blob, name, opts) {\n    name = name || blob.name || 'download'\n\n    if (typeof blob === 'string') {\n      if (corsEnabled(blob)) {\n        download(blob, name, opts)\n      } else {\n        var a = document.createElement('a')\n        a.href = blob\n        a.target = '_blank'\n        setTimeout(function () { click(a) })\n      }\n    } else {\n      navigator.msSaveOrOpenBlob(bom(blob, opts), name)\n    }\n  }\n\n  // Fallback to using FileReader and a popup\n  : function saveAs (blob, name, opts, popup) {\n    // Open a popup immediately do go around popup blocker\n    // Mostly only available on user interaction and the fileReader is async so...\n    popup = popup || open('', '_blank')\n    if (popup) {\n      popup.document.title =\n      popup.document.body.innerText = 'downloading...'\n    }\n\n    if (typeof blob === 'string') return download(blob, name, opts)\n\n    var force = blob.type === 'application/octet-stream'\n    var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari\n    var isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent)\n\n    if ((isChromeIOS || (force && isSafari) || isMacOSWebView) && typeof FileReader !== 'undefined') {\n      // Safari doesn't allow downloading of blob URLs\n      var reader = new FileReader()\n      reader.onloadend = function () {\n        var url = reader.result\n        url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;')\n        if (popup) popup.location.href = url\n        else location = url\n        popup = null // reverse-tabnabbing #460\n      }\n      reader.readAsDataURL(blob)\n    } else {\n      var URL = _global.URL || _global.webkitURL\n      var url = URL.createObjectURL(blob)\n      if (popup) popup.location = url\n      else location.href = url\n      popup = null // reverse-tabnabbing #460\n      setTimeout(function () { URL.revokeObjectURL(url) }, 4E4) // 40s\n    }\n  }\n)\n\n_global.saveAs = saveAs.saveAs = saveAs\n\nif (typeof module !== 'undefined') {\n  module.exports = saveAs;\n}\n", "// -- Global\n\nexport const isClient = typeof window !== \"undefined\";\n\nexport const DEBUG = isClient ? !!window.localStorage.getItem(\"VERTIGO_DEBUG\") : false;\n\nexport const MAXIMUM_BRIGHTNESS = 255;\n\nexport interface IDot {\n  x: number;\n  y: number;\n}\n\n// -- Dots\n\n// How many dots are added with each concentric circle\nexport const DOT_INCREMENT_STEP: number = 6;\n\nexport interface IDotsOptions {\n  resolution: number;\n  minimumDotRadius: number;\n  maximumDotRadius: number;\n  distanceBetweenDots: number;\n  invert: boolean;\n  plottingStep: number;\n}\n\nexport interface IDotsOptionsPartial {\n  resolution?: number;\n  minimumDotRadius?: number;\n  maximumDotRadius?: number;\n  distanceBetweenDots?: number;\n  invert?: boolean;\n  plottingStep?: number;\n}\n\nexport const dotsDefaultOptions: IDotsOptions = {\n  // Number of concentric circles\n  resolution: 25,\n  // Minimum dot radius\n  minimumDotRadius: 1,\n  // Maximum dot radius\n  maximumDotRadius: 5,\n  // Distance between dots\n  distanceBetweenDots: 2,\n  // By default, images are drawn as white on black\n  // disable this option to get black on white\n  invert: true,\n  // For pen plotting\n  // draws concentric circles increasing radius by this step\n  plottingStep: 0,\n};\n\nexport type TDotsImage = number[][];\n\n// -- Spiral\n\nexport interface ISpiralOptions {\n  minimumLineWidth: number;\n  maximumLineWidth: number;\n  distanceBetweenLines: number;\n  startingRadius: number;\n  invert: boolean;\n  plottingStep: number;\n}\n\nexport interface ISpiralOptionsPartial {\n  minimumLineWidth?: number;\n  maximumLineWidth?: number;\n  distanceBetweenLines?: number;\n  startingRadius?: number;\n  invert?: boolean;\n  plottingStep?: number;\n}\n\nexport const spiralDefaultOptions: ISpiralOptions = {\n  // Minimum line width\n  minimumLineWidth: 1,\n  // Maximum line width\n  maximumLineWidth: 5,\n  // Distance between lines\n  distanceBetweenLines: 1,\n  // Starting radius\n  startingRadius: 4,\n  // By default, images are drawn as white on black\n  // disable this option to get black on white\n  invert: true,\n  // For pen plotting\n  // draws additional lines increasing gap by this step\n  plottingStep: 0,\n};\n\nexport interface ISpiralSegment {\n  x: number;\n  y: number;\n  width: number;\n}\n\nexport type TSpiralImage = ISpiralSegment[];\n", "export function toFixed(number: number, numberOfDecimalSpaces: number = 2): number {\n  return parseFloat(number.toFixed(numberOfDecimalSpaces));\n}\n\nexport function getRectBrightness(ctx: CanvasRenderingContext2D, x: number, y: number, rectWidth: number): number {\n  const imageData = ctx.getImageData(x, y, rectWidth, rectWidth);\n\n  let brightness = 0;\n\n  for (let k = 0; k < imageData.data.length; k += 4) {\n    const r = imageData.data[k];\n    const g = imageData.data[k + 1];\n    const b = imageData.data[k + 2];\n    const a = imageData.data[k + 3];\n\n    brightness += 0.299 * r + 0.587 * g + 0.114 * b;\n  }\n\n  const COLORS_COUNT = 4; // r g b a\n\n  return brightness / (imageData.data.length / COLORS_COUNT);\n}\n\nexport function createSvg(svgSize: number, moveToCenter: boolean, className: string): SVGElement {\n  const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n  const min = moveToCenter ? svgSize / -2 : 0;\n\n  svg.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\n  svg.setAttribute(\"class\", className);\n  svg.setAttribute(\"viewBox\", `${min} ${min} ${svgSize} ${svgSize}`);\n\n  return svg;\n}\n\nexport function mapRange(value: number, inputRange: number, outputMin: number, outputMax: number) {\n  const outputRange = outputMax - outputMin;\n  return (value / inputRange) * outputRange + outputMin;\n}\n\nexport function drawImageOnCanvas(imageSrc: string, size: 500, callback: (canvas: HTMLCanvasElement) => void) {\n  const canvas: HTMLCanvasElement = document.createElement(\"canvas\");\n  canvas.width = size;\n  canvas.height = size;\n\n  const ctx = canvas.getContext(\"2d\", {\n    // This option will save memory on frequent getImageData calls Vertigo is making\n    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext#willreadfrequently\n    willReadFrequently: true,\n  });\n\n  const image = new Image();\n  image.addEventListener(\"load\", () => {\n    // Get the largest square from the image\n    let yOffset = 0;\n    let xOffset = 0;\n    let imageSize;\n\n    if (image.height > image.width) {\n      yOffset = (image.height - image.width) / 2;\n      imageSize = image.width;\n    } else {\n      xOffset = (image.width - image.height) / 2;\n      imageSize = image.height;\n    }\n\n    ctx?.drawImage(image, xOffset, yOffset, imageSize, imageSize, 0, 0, size, size);\n\n    callback(canvas);\n  });\n\n  // Load image\n  image.src = imageSrc;\n}\n", "import { drawImageOnCanvas, getRectBrightness, mapRange, toFixed } from \"./helpers\";\nimport {\n  DEBUG,\n  DOT_INCREMENT_STEP,\n  dotsDefaultOptions,\n  IDotsOptions,\n  IDotsOptionsPartial,\n  MAXIMUM_BRIGHTNESS,\n  TDotsImage,\n} from \"./constants\";\n\nfunction getDotSizeFromRect(brightness, minimumDotRadius, maximumDotRadius) {\n  const circleSize = mapRange(brightness, MAXIMUM_BRIGHTNESS, minimumDotRadius, maximumDotRadius);\n\n  return toFixed(circleSize, 2);\n}\n\nfunction getRectCornerFromCenter(r, angle, rectangleSize, size) {\n  const rectCenterX = r * Math.cos(angle);\n  const rectCenterY = r * Math.sin(angle);\n\n  const x = rectCenterX - rectangleSize / 2 + size / 2;\n  const y = rectCenterY - rectangleSize / 2 + size / 2;\n\n  return {\n    x,\n    y,\n  };\n}\n\n// TODO low res\n// if (brightness < 100) {\n//   convertedImage[i][j] = 1;\n// } else if (brightness < 200) {\n//   convertedImage[i][j] = 2;\n// } else {\n//   convertedImage[i][j] = 4;\n// }\n\nexport default function convertImageToDots(\n  imageSrc: string,\n  customOptions: IDotsOptionsPartial,\n  callback: (convertedImage: TDotsImage) => void\n) {\n  const size = 500;\n\n  const options: IDotsOptions = {\n    ...dotsDefaultOptions,\n    ...customOptions,\n  };\n\n  drawImageOnCanvas(imageSrc, size, (canvas) => {\n    const ctx: CanvasRenderingContext2D = canvas.getContext(\"2d\");\n\n    const convertedImage: TDotsImage = [[]];\n    const rectangleSize = size / 2 / (options.resolution + 0.5);\n\n    const helperRectangles = [];\n\n    // Center dot\n    const { x, y } = getRectCornerFromCenter(0, 0, rectangleSize, size);\n    let brightness = getRectBrightness(ctx, x, y, rectangleSize);\n\n    if (!options.invert) {\n      brightness = 255 - brightness;\n    }\n\n    convertedImage[0][0] = getDotSizeFromRect(brightness, options.minimumDotRadius, options.maximumDotRadius);\n\n    if (DEBUG) {\n      helperRectangles.push({ x, y });\n    }\n\n    for (let i = 1; i <= options.resolution; i++) {\n      const r = i * rectangleSize;\n\n      const dotCount = i * DOT_INCREMENT_STEP;\n      const dotAngleStep = 360 / dotCount;\n\n      convertedImage[i] = [];\n\n      for (let j = 0; j < dotCount; j++) {\n        const angle = (Math.PI * (dotAngleStep * j)) / 180;\n\n        const { x, y } = getRectCornerFromCenter(r, angle, rectangleSize, size);\n\n        let brightness = getRectBrightness(ctx, x, y, rectangleSize);\n\n        if (!options.invert) {\n          brightness = 255 - brightness;\n        }\n\n        convertedImage[i][j] = getDotSizeFromRect(brightness, options.minimumDotRadius, options.maximumDotRadius);\n\n        if (DEBUG) {\n          helperRectangles.push({ x, y });\n        }\n      }\n    }\n\n    callback(convertedImage);\n\n    if (DEBUG) {\n      ctx.strokeStyle = \"rgb(255, 180, 0, 0.3)\";\n\n      helperRectangles.forEach((rect) => {\n        ctx.strokeRect(rect.x, rect.y, rectangleSize, rectangleSize);\n      });\n\n      document.querySelector(\".debug--dots\").innerHTML = \"\";\n      document.querySelector(\".debug--dots\").appendChild(canvas);\n    }\n  });\n}\n", "import { DOT_INCREMENT_STEP, IDotsOptions, IDotsOptionsPartial, dotsDefaultOptions, TDotsImage } from \"./constants\";\n\nimport { createSvg } from \"./helpers\";\nimport convertImageToDots from \"./convert-image-to-dots\";\n\n// TODO\n//\n// * Dynamic dot size\n// * Performance?\n\ninterface IDot {\n  element: SVGCircleElement;\n  x: string;\n  y: string;\n  scale: number;\n}\n\ntype TConvertCallback = (convertedImage: TDotsImage) => void;\n\nexport default class Vertigo {\n  private options: IDotsOptions;\n  private dots?: IDot[][];\n  private radiusGrowStep: number;\n  private imageURL: string | null = null;\n\n  public svg: SVGElement;\n\n  constructor(options?: IDotsOptionsPartial) {\n    this.options = {\n      ...dotsDefaultOptions,\n      ...options,\n    };\n\n    this.radiusGrowStep = this.options.maximumDotRadius * 2 + this.options.distanceBetweenDots;\n\n    const size = this.options.resolution * 2 * this.radiusGrowStep;\n    const svgSize = size + this.options.maximumDotRadius * 2;\n\n    this.svg = createSvg(svgSize, true, \"vertigo vertigo--dots\");\n\n    this.generateDots();\n  }\n\n  private static createDot(x: string, y: string, dotRadius: number, className = \"\"): IDot {\n    const dot = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\n    if (className) {\n      dot.setAttribute(\"class\", className);\n    }\n    dot.setAttribute(\"cx\", x);\n    dot.setAttribute(\"cy\", y);\n    dot.setAttribute(\"r\", dotRadius.toString());\n\n    return {\n      element: dot,\n      x,\n      y,\n      scale: 1,\n    };\n  }\n\n  private generateDots() {\n    // Create central dot\n    const centralDot = Vertigo.createDot(\"0\", \"0\", this.options.minimumDotRadius);\n\n    this.dots = [[centralDot]];\n\n    this.svg.appendChild(centralDot.element);\n\n    for (let i = 1; i <= this.options.resolution; i++) {\n      const r = i * this.radiusGrowStep;\n\n      const dotCount = i * DOT_INCREMENT_STEP;\n      const dotAngleStep = 360 / dotCount;\n\n      this.dots[i] = [];\n\n      for (let j = 0; j < dotCount; j++) {\n        const angle = (Math.PI * (dotAngleStep * j)) / 180;\n\n        const x = (r * Math.cos(angle)).toFixed(3);\n        const y = (r * Math.sin(angle)).toFixed(3);\n\n        const dot = Vertigo.createDot(x, y, this.options.minimumDotRadius);\n\n        this.dots[i].push(dot);\n\n        this.svg.appendChild(dot.element);\n      }\n    }\n  }\n\n  private generatePlottingHelpers(dotScale: number, dot: IDot) {\n    const x = dot.element.getAttribute(\"cx\") as string;\n    const y = dot.element.getAttribute(\"cy\") as string;\n    const xNumber = parseFloat(x);\n\n    const className = \"plotting-helper\";\n\n    // Skip center line if dotScale is smaller than threshold\n    if (dotScale > 1) {\n      const centerLine = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n      const d = `M ${xNumber - 0.1} ${y} l 0.01 0`;\n      centerLine.setAttribute(\"d\", d);\n      centerLine.setAttribute(\"class\", className);\n      centerLine.setAttribute(\"stroke-linecap\", \"round\");\n      this.svg.appendChild(centerLine);\n    }\n\n    for (let r = this.options.plottingStep; r < dotScale; r += this.options.plottingStep) {\n      const plotDot = Vertigo.createDot(x, y, r, className);\n\n      this.svg.appendChild(plotDot.element);\n    }\n  }\n\n  public drawImage(image: TDotsImage) {\n    // Remove saved image file because we are drawing a custom image\n    this.imageURL = null;\n\n    // Remove all plotting dot helpers\n    this.svg.querySelectorAll(\".plotting-helper\").forEach((plotDot) => {\n      this.svg.removeChild(plotDot);\n    });\n\n    image.forEach((dots: number[], i: number) => {\n      dots.forEach((dotScale: number, j: number) => {\n        const circle = this.dots?.[i];\n\n        if (circle) {\n          const dot = circle[j];\n\n          if (dot.scale !== dotScale) {\n            dot.scale = dotScale;\n\n            dot.element.setAttribute(\"r\", dotScale.toString());\n          }\n\n          if (this.options.plottingStep > 0) {\n            this.svg.classList.add(\"vertigo--plotting\");\n            this.generatePlottingHelpers(dotScale, dot);\n          } else {\n            this.svg.classList.remove(\"vertigo--plotting\");\n          }\n        }\n      });\n    });\n  }\n\n  public convertImage(imageURL: string, callback?: TConvertCallback) {\n    convertImageToDots(imageURL, this.options, (convertedImage: TDotsImage) => {\n      this.drawImage(convertedImage);\n      this.imageURL = imageURL;\n\n      if (callback) {\n        callback(convertedImage);\n      }\n    });\n  }\n\n  private removeDots() {\n    this.dots?.forEach((circle) => {\n      circle.forEach((dot) => {\n        dot.element.parentNode?.removeChild(dot.element);\n      });\n    });\n  }\n\n  public setOptions(newOptions: IDotsOptionsPartial, callback?: TConvertCallback) {\n    this.options = {\n      ...this.options,\n      ...newOptions,\n    };\n\n    this.radiusGrowStep = this.options.maximumDotRadius * 2 + this.options.distanceBetweenDots;\n\n    const size = this.options.resolution * 2 * this.radiusGrowStep;\n    const svgSize = size + this.options.maximumDotRadius * 2;\n\n    // Update svg size\n    this.svg.setAttribute(\"viewBox\", `${svgSize / -2} ${svgSize / -2} ${svgSize} ${svgSize}`);\n\n    this.removeDots();\n    this.generateDots();\n\n    if (this.imageURL) {\n      this.convertImage(this.imageURL, callback);\n    }\n  }\n\n  public getOptions() {\n    return { ...this.options };\n  }\n}\n", "import { drawImageOnCanvas, getRectBrightness, mapRange, toFixed } from \"./helpers\";\nimport {\n  DEBUG,\n  ISpiralOptions,\n  ISpiralOptionsPartial,\n  MAXIMUM_BRIGHTNESS,\n  spiralDefaultOptions,\n  TSpiralImage,\n} from \"./constants\";\n\nexport default function convertImageToSpiral(\n  imageSrc: string,\n  customOptions: ISpiralOptionsPartial,\n  callback: (convertedImage: TSpiralImage) => void\n) {\n  const size = 500;\n\n  const options: ISpiralOptions = {\n    ...spiralDefaultOptions,\n    ...customOptions,\n  };\n\n  drawImageOnCanvas(imageSrc, size, (canvas) => {\n    const ctx: CanvasRenderingContext2D = canvas.getContext(\"2d\");\n    const helperRectangles = [];\n    const convertedImage: TSpiralImage = [];\n\n    const center = size / 2;\n\n    // Experiment with the size of the rectangle\n    const rectangleSize = Math.round((options.distanceBetweenLines + options.maximumLineWidth) * 0.8);\n\n    const distance = (options.distanceBetweenLines + options.maximumLineWidth) / (2 * Math.PI);\n\n    // Size of the image, minus the width of the starting circle\n    // divided by the distance between lines\n    const maxHalfRotationsCount = Math.floor(\n      (size - options.startingRadius * 2) / (options.distanceBetweenLines + options.maximumLineWidth)\n    );\n\n    // Maximum spiral angle\n    const maxAngle = maxHalfRotationsCount * Math.PI; // size / 2.1 / distance; // In radians\n\n    let angleIncrementStep = 3 / options.startingRadius;\n\n    for (let angle = 0; angle < maxAngle; angle += angleIncrementStep) {\n      const r = options.startingRadius + distance * angle;\n      const x = toFixed(center + r * Math.cos(angle), 3);\n      const y = toFixed(center + r * Math.sin(angle), 3);\n\n      helperRectangles.push({ x, y });\n\n      let brightness = getRectBrightness(ctx, x, y, rectangleSize);\n\n      if (!options.invert) {\n        brightness = 255 - brightness;\n      }\n\n      const width = mapRange(brightness, MAXIMUM_BRIGHTNESS, options.minimumLineWidth, options.maximumLineWidth);\n\n      angleIncrementStep = 3 / r;\n\n      convertedImage.push({\n        x,\n        y,\n        width,\n      });\n    }\n\n    callback(convertedImage);\n\n    if (DEBUG) {\n      ctx.strokeStyle = \"rgb(255, 180, 0, 0.3)\";\n\n      helperRectangles.forEach((rect) => {\n        ctx.strokeRect(rect.x, rect.y, rectangleSize, rectangleSize);\n      });\n\n      document.querySelector(\".debug--spiral\").innerHTML = \"\";\n      document.querySelector(\".debug--spiral\").appendChild(canvas);\n    }\n  });\n}\n", "// The smoothing ratio\nconst smoothing = 0.2;\n\n// Properties of a line\n// I:  - pointA (array) [x,y]: coordinates\n//     - pointB (array) [x,y]: coordinates\n// O:  - (object) { length: l, angle: a }: properties of the line\nconst lineProperties = (pointA, pointB) => {\n  const lengthX = pointB.x - pointA.x;\n  const lengthY = pointB.y - pointA.y;\n\n  return {\n    length: Math.sqrt(Math.pow(lengthX, 2) + Math.pow(lengthY, 2)),\n    angle: Math.atan2(lengthY, lengthX),\n  };\n};\n\n// Position of a control point\n// I:  - current (array) [x, y]: current point coordinates\n//     - previous (array) [x, y]: previous point coordinates\n//     - next (array) [x, y]: next point coordinates\n//     - reverse (boolean, optional): sets the direction\n// O:  - (array) [x,y]: a tuple of coordinates\nconst controlPoint = (current, previous, next, reverse = false) => {\n  // When 'current' is the first or last point of the array\n  // 'previous' or 'next' don't exist.\n  // Replace with 'current'\n  const p = previous || current;\n  const n = next || current;\n\n  // Properties of the opposed-line\n  const o = lineProperties(p, n);\n\n  // If is end-control-point, add PI to the angle to go backward\n  const angle = o.angle + (reverse ? Math.PI : 0);\n  const length = o.length * smoothing;\n\n  // The control point position is relative to the current point\n  const x = current.x + Math.cos(angle) * length;\n  const y = current.y + Math.sin(angle) * length;\n  return { x, y };\n};\n\n// Create the bezier curve command\n// I:  - point (array) [x,y]: current point coordinates\n//     - i (integer): index of 'point' in the array 'a'\n//     - a (array): complete array of points coordinates\n// O:  - (string) 'C x2,y2 x1,y1 x,y': SVG cubic bezier C command\nconst bezierCommand = (point, i, a) => {\n  // start control point\n  const cps = controlPoint(a[i - 1], a[i - 2], point);\n\n  // end control point\n  const cpe = controlPoint(point, a[i - 1], a[i + 1], true);\n\n  return `C ${cps.x},${cps.y} ${cpe.x},${cpe.y} ${point.x},${point.y}`;\n};\n\nexport default function smoothLine(points, firstCommand = \"M\") {\n  // build the d attributes by looping over the points\n  const d = points.reduce((acc, point, i, a) => {\n    if (i === 0) {\n      return `${firstCommand} ${point.x},${point.y}`;\n    }\n\n    return `${acc} ${bezierCommand(point, i, a)}`;\n  }, \"\");\n\n  return d;\n}\n", "import { IDot, ISpiralOptions, ISpiralOptionsPartial, spiralDefaultOptions, TSpiralImage } from \"./constants\";\nimport { createSvg, toFixed } from \"./helpers\";\n\nimport convertImageToSpiral from \"./convert-image-to-spiral\";\nimport smoothLine from \"./smooth-line\";\n\ntype TSpiralConvertCallback = (convertedImage: TSpiralImage) => void;\n\nconst SVG_SIZE = 500;\n\nexport default class VertigoSpiral {\n  private options: ISpiralOptions;\n  private imageURL: string | null = null;\n  private svgPath: SVGPathElement;\n\n  public svg: SVGElement;\n\n  constructor(options?: ISpiralOptionsPartial) {\n    this.options = {\n      ...spiralDefaultOptions,\n      ...options,\n    };\n\n    this.svg = createSvg(SVG_SIZE, false, \"vertigo vertigo--spiral\");\n\n    this.svgPath = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n\n    this.svg.appendChild(this.svgPath);\n  }\n\n  public convertImage(imageURL: string, callback?: TSpiralConvertCallback) {\n    convertImageToSpiral(imageURL, this.options, (convertedImage: TSpiralImage) => {\n      this.drawImage(convertedImage);\n      this.imageURL = imageURL;\n\n      if (callback) {\n        callback(convertedImage);\n      }\n    });\n  }\n\n  // Takes three dots and returns two dots,\n  // a vector which direction is half angle between these three dots\n  // and velocity is equal to a spiral line's width at that dot\n  /*\n                          \u2022 outerDots[0]\n                         /\n                        /\n    previousDot \u2022------\u2022 dot\n                      / \\\n                     /   \u2022 nextDot\n       outerDots[1] \u2022\n  */\n  private static getOuterDots(previousDot, dot, nextDot) {\n    // Angle between (previosDot, dot) vector and x axis\n    /*\n    previousDot \u2022------\u2022 dot\n               angle1 / \\\n                     /   \u2022 nextDot\n    */\n    let angle1 = VertigoSpiral.getAngleBetweenThreeDots(previousDot, dot, nextDot) / 2;\n\n    let offset = 100;\n\n    if (angle1 > 0) {\n      offset = -100;\n    }\n    // Angle between (previosDot, dot) vector and x axis\n    /*\n                 dot \u2022--------\u2022 (dot.x + offset, dot.y)\n                    / angle2\n                   /\n      previousDot \u2022\n    */\n    const angle2 = VertigoSpiral.getAngleBetweenThreeDots(previousDot, dot, {\n      x: dot.x + offset, // Moving dot on x axis\n      y: dot.y,\n    });\n\n    // Angle between the x axis and the half angle vector\n    const angle = toFixed(angle2 - angle1, 2);\n\n    const halfWidth = dot.width / 2;\n\n    const point1 = {\n      x: toFixed(dot.x + halfWidth * Math.cos(angle), 2),\n      y: toFixed(dot.y - halfWidth * Math.sin(angle), 2),\n    };\n\n    const point2 = {\n      x: toFixed(dot.x + halfWidth * Math.cos(angle + Math.PI), 2),\n      y: toFixed(dot.y - halfWidth * Math.sin(angle + Math.PI), 2),\n    };\n\n    const outerDots = [point1, point2];\n\n    return outerDots;\n  }\n\n  private static getVector(a, b) {\n    return {\n      x: a.x - b.x,\n      y: a.y - b.y,\n    };\n  }\n\n  private static getAngleBetweenThreeDots(a, b, c) {\n    const vectorBA = VertigoSpiral.getVector(b, a);\n    const vectorBC = VertigoSpiral.getVector(b, c);\n\n    const angle = Math.atan2(vectorBC.y, vectorBC.x) - Math.atan2(vectorBA.y, vectorBA.x);\n\n    return angle;\n  }\n\n  generatePath(image) {\n    // Setting starting dot, based on \"startingRadius\"\n    // Spiral always starts from PI angle, that's why it's moved to the \"right\"\n    // (in other words, adding \"r\" to the \"x\" axis coordinate)\n    // while keeping y coordinate centered\n    const pathOuter = [];\n    const pathInner = [];\n\n    // We need three dots to draw a bezier,\n    // that's why loop starts from 1 and ends on length - 1\n    for (let i = 1; i < image.length - 1; i++) {\n      const previousDot = image[i - 1];\n      const currentDot = image[i];\n      const nextDot = image[i + 1];\n\n      const od = VertigoSpiral.getOuterDots(previousDot, currentDot, nextDot);\n\n      pathOuter.push(od[0]);\n      pathInner.push(od[1]);\n    }\n\n    return smoothLine(pathOuter, \"M\") + smoothLine(pathInner.reverse(), \"L\") + \"Z\";\n  }\n\n  private generatePlottingHelpers(image) {\n    const plottingImageCopy = image.map((point) => ({ ...point }));\n    const centralLine = image.map((point) => ({ ...point }));\n    // Removing the first and the last point\n    // for the central line as they are not used by \"generatePath\"\n    centralLine.shift();\n    centralLine.pop();\n\n    const centralLinePath = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n    centralLinePath.setAttribute(\"class\", \"plotting-helper\");\n    centralLinePath.setAttribute(\"d\", smoothLine(centralLine));\n\n    this.svg.appendChild(centralLinePath);\n\n    for (\n      let step = this.options.plottingStep;\n      step < this.options.maximumLineWidth;\n      step += this.options.plottingStep\n    ) {\n      plottingImageCopy.forEach((point) => {\n        point.width = point.width - this.options.plottingStep;\n\n        if (point.width < 0) {\n          point.width = 0;\n        }\n      });\n      const d = this.generatePath(plottingImageCopy);\n\n      const path = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n      path.setAttribute(\"class\", \"plotting-helper\");\n      path.setAttribute(\"d\", d);\n\n      this.svg.appendChild(path);\n    }\n  }\n\n  public drawImage(image) {\n    this.svgPath.setAttribute(\"d\", this.generatePath(image));\n\n    // Remove all plotting lines helpers\n    this.svg.querySelectorAll(\".plotting-helper\").forEach((plotDot) => {\n      this.svg.removeChild(plotDot);\n    });\n\n    if (this.options.plottingStep > 0) {\n      this.svg.classList.add(\"vertigo--plotting\");\n      this.generatePlottingHelpers(image);\n    } else {\n      this.svg.classList.remove(\"vertigo--plotting\");\n    }\n  }\n\n  public setOptions(newOptions: ISpiralOptionsPartial, callback?: TSpiralConvertCallback) {\n    this.options = {\n      ...this.options,\n      ...newOptions,\n    };\n\n    if (this.imageURL) {\n      this.convertImage(this.imageURL, callback);\n    }\n  }\n\n  public getOptions() {\n    return { ...this.options };\n  }\n}\n", "import { saveAs } from \"file-saver\";\n\nexport function createOption({ callback, label, max, min, name, step = 1, value, helperText = \"\" }) {\n  const focus = document.createElement(\"span\");\n  focus.className = \"option-focus\";\n\n  const labelName = document.createElement(\"label\");\n  labelName.className = \"option-name\";\n  labelName.innerHTML = `${label}: `;\n\n  if (helperText) {\n    labelName.classList.add(\"option-name--has-helper-text\");\n    labelName.title = helperText;\n  }\n\n  const spanValue = document.createElement(\"span\");\n  spanValue.innerHTML = ` ${value}`;\n\n  const input = document.createElement(\"input\");\n  input.setAttribute(\"type\", \"range\");\n  input.setAttribute(\"min\", min);\n  input.setAttribute(\"max\", max);\n  input.setAttribute(\"value\", value);\n  input.setAttribute(\"step\", step.toString());\n  input.setAttribute(\"class\", `OptionsInput OptionsInput--${name}`);\n  input.addEventListener(\"change\", (e) => {\n    const value = (e.target as HTMLInputElement).value;\n    callback(name, value);\n    spanValue.innerHTML = ` ${value}`;\n  });\n\n  const divOption = document.createElement(\"div\");\n  divOption.className = \"option\";\n  divOption.appendChild(labelName);\n  divOption.appendChild(spanValue);\n  divOption.appendChild(input);\n  divOption.appendChild(focus);\n\n  return divOption;\n}\n\nexport function createCheckboxOption({ callback, label, name, value }) {\n  const labelName = document.createElement(\"label\");\n  labelName.className = \"checkbox\";\n  labelName.innerHTML = ` ${label}`;\n\n  const input = document.createElement(\"input\");\n  input.setAttribute(\"type\", \"checkbox\");\n  input.setAttribute(\"checked\", value);\n  input.className = `OptionsInput OptionsInput--${name}`;\n  input.addEventListener(\"change\", (e) => {\n    callback(name, (e.target as HTMLInputElement).checked);\n  });\n\n  const icon = document.createElement(\"span\");\n  icon.className = \"checkbox-icon\";\n  icon.innerHTML = `<svg viewBox=\"0 0 14 14\">\n<path\nfill=\"none\"\nstroke=\"white\"\nstroke-linejoin=\"round\"\nstroke-linecap=\"round\"\nstroke-width=\"2.5\" d=\"M 3 7.5 l 3 3 l 5 -7\"\n/>\n</svg>`;\n\n  const focus = document.createElement(\"span\");\n  focus.className = \"checkbox-focus\";\n\n  labelName.prepend(focus);\n  labelName.prepend(icon);\n  labelName.prepend(input);\n\n  const divOption = document.createElement(\"div\");\n  divOption.appendChild(labelName);\n\n  return divOption;\n}\n\nconst namingMap = {\n  distanceBetweenDots: \"dist\",\n  distanceBetweenLines: \"dist\",\n  startingRadius: \"start\",\n};\n\nexport function downloadSVG(instance, type) {\n  const options = instance.getOptions();\n\n  console.log(instance.imageURL);\n\n  let name = type;\n\n  Object.keys(options).forEach((key) => {\n    const shortOptionName = namingMap[key] || key.substr(0, 3);\n    name += `_${shortOptionName}-${options[key]}`;\n  });\n\n  name += \".svg\";\n\n  saveAs(`data:application/octet-stream;base64,${btoa(instance.svg.outerHTML)}`, name);\n}\n", "import { toFixed } from \"./helpers\";\n\nfunction getRandomScale() {\n  const random: number = Math.random() * 3 + 1;\n\n  return toFixed(random, 2);\n}\n\nfunction generateRandomImage(resolution: number) {\n  const image = [\n    // Center dot\n    [getRandomScale()],\n  ];\n\n  const dotStep: number = 6;\n\n  for (let i: number = 1; i <= resolution; i++) {\n    const dotCount: number = i * dotStep;\n    image[i] = [];\n\n    for (let j = 0; j < dotCount; j++) {\n      image[i].push(getRandomScale());\n    }\n  }\n\n  return image;\n}\n\nexport default generateRandomImage;\n", "import Vertigo from \"../../src/vertigo\";\nimport VertigoSpiral from \"../../src/spiral\";\nimport { ISpiralOptions, IDotsOptions } from \"../../src/constants\";\nimport { createOption, createCheckboxOption, downloadSVG } from \"../../src/demo-helpers\";\nimport generateRandomImage from \"../../src/generate-random-image\";\n\nconst helloImage: HTMLElement = document.querySelector(\".example--hello\");\n\n// ------- DOTS\n\nconst dotsOutputContent: HTMLElement = document.querySelector(\".output-content--dots\");\nconst dotsSvgWrapper: HTMLElement = document.querySelector(\".output-svg-wrapper--dots\");\nconst dotsFileInput: HTMLInputElement = document.querySelector(\".file-input--dots\");\nconst dotsOptionsDiv: HTMLElement = document.querySelector(\".options--dots\");\n\nconst dotsDownloadButton: HTMLAnchorElement = document.querySelector(\".button--dots-download\");\nconst dotsRandomButton: HTMLButtonElement = document.querySelector(\".button--dots-random\");\n\nconst dotsOptions: IDotsOptions = {\n  minimumDotRadius: 1,\n  maximumDotRadius: 5,\n  distanceBetweenDots: 1,\n  resolution: 25,\n  invert: true,\n  plottingStep: 0,\n};\n\nfunction dotOptionsChangeHandler(name, value) {\n  // Update global options object\n  dotsOptions[name] = parseFloat(value);\n\n  if (name === \"invert\") {\n    dotsOptions[name] = Boolean(value);\n  }\n\n  // Redraw vertigo with new options\n  vertigo.setOptions(dotsOptions, () => {\n    if (name === \"invert\") {\n      dotsOutputContent.classList.toggle(\"output-content--invert\");\n    }\n  });\n}\n\nconst DOTS_OPTIONS_INPUTS = [\n  {\n    callback: dotOptionsChangeHandler,\n    label: \"Resolution\",\n    max: 50,\n    min: 5,\n    name: \"resolution\",\n    value: 25,\n  },\n  {\n    callback: dotOptionsChangeHandler,\n    label: \"Min dot radius\",\n    max: 5,\n    min: 0,\n    name: \"minimumDotRadius\",\n    value: 1,\n  },\n  {\n    callback: dotOptionsChangeHandler,\n    label: \"Max dot radius\",\n    max: 20,\n    min: 1,\n    name: \"maximumDotRadius\",\n    value: 5,\n  },\n  {\n    callback: dotOptionsChangeHandler,\n    label: \"Distance\",\n    max: 20,\n    min: 0,\n    name: \"distanceBetweenDots\",\n    value: 1,\n  },\n  {\n    callback: dotOptionsChangeHandler,\n    label: \"Pen plotting step\",\n    max: 5,\n    min: 0,\n    name: \"plottingStep\",\n    value: 0,\n    step: 0.1,\n    helperText: \"If not zero, this option will create concentric circles which are useful for for pen plotting.\",\n  },\n];\n\nconst DOTS_INVERT_INPUT = {\n  callback: dotOptionsChangeHandler,\n  label: \"Invert colors\",\n  name: \"invert\",\n  value: true,\n};\n\nDOTS_OPTIONS_INPUTS.forEach((inputData) => {\n  dotsOptionsDiv.appendChild(createOption(inputData));\n});\n\ndotsOptionsDiv.appendChild(createCheckboxOption(DOTS_INVERT_INPUT));\n\n// Create vertigo instance\nconst vertigo = new Vertigo(dotsOptions);\n\n// Show SVG\ndotsSvgWrapper.appendChild(vertigo.svg);\n\n// On file input change convert it\ndotsFileInput.addEventListener(\"change\", () => {\n  const file: File = dotsFileInput.files[0];\n  const imageURL = URL.createObjectURL(file);\n\n  vertigo.convertImage(imageURL);\n});\n\n// Download SVG\ndotsDownloadButton.addEventListener(\"click\", () => downloadSVG(vertigo, \"vertigo\"));\n\n// Draw random image\ndotsRandomButton.addEventListener(\"click\", () => {\n  vertigo.drawImage(generateRandomImage(vertigo.getOptions().resolution));\n});\n\n// On load draw hello image :)\nvertigo.convertImage(helloImage.getAttribute(\"src\"));\n\n// -------------- SPIRAL\n\nconst spiralOptionsDiv: HTMLElement = document.querySelector(\".options--spiral\");\nconst spiralDownloadButton: HTMLAnchorElement = document.querySelector(\".button--spiral-download\");\nconst spiralFileInput: HTMLInputElement = document.querySelector(\".file-input--spiral\");\nconst spiralSvgWrapper: HTMLElement = document.querySelector(\".output-svg-wrapper--spiral\");\nconst spiralOutputContent: HTMLElement = document.querySelector(\".output-content--spiral\");\n\nconst spiralOptions: ISpiralOptions = {\n  minimumLineWidth: 1,\n  maximumLineWidth: 5,\n  distanceBetweenLines: 1,\n  startingRadius: 3,\n  invert: true,\n  plottingStep: 0,\n};\n\nfunction spiralOptionsChangeHandler(name, value) {\n  // Update global options object\n  spiralOptions[name] = parseFloat(value);\n\n  if (name === \"invert\") {\n    spiralOptions[name] = Boolean(value);\n  }\n\n  // Redraw vertigo with new options\n  spiral.setOptions(spiralOptions, () => {\n    if (name === \"invert\") {\n      spiralOutputContent.classList.toggle(\"output-content--invert\");\n    }\n  });\n}\n\nconst SPIRAL_OPTIONS_INPUTS = [\n  {\n    callback: spiralOptionsChangeHandler,\n    label: \"Min line width\",\n    min: 0,\n    max: 5,\n    name: \"minimumLineWidth\",\n    value: 1,\n    step: 0.5,\n  },\n  {\n    callback: spiralOptionsChangeHandler,\n    label: \"Max line width\",\n    min: 1,\n    max: 20,\n    name: \"maximumLineWidth\",\n    value: 5,\n    step: 0.5,\n  },\n  {\n    callback: spiralOptionsChangeHandler,\n    label: \"Distance\",\n    min: 0,\n    max: 10,\n    name: \"distanceBetweenLines\",\n    value: 1,\n    step: 0.5,\n  },\n  {\n    callback: spiralOptionsChangeHandler,\n    label: \"Starting radius\",\n    min: 3,\n    max: 300,\n    name: \"startingRadius\",\n    value: 3,\n    step: 0.5,\n  },\n  {\n    callback: spiralOptionsChangeHandler,\n    label: \"Pen plotting step\",\n    max: 10,\n    min: 0,\n    name: \"plottingStep\",\n    value: 0,\n    step: 0.5,\n    helperText: \"If not zero, this option will create concentric paths which are useful for for pen plotting.\",\n  },\n];\n\nconst SPIRAL_INVERT_INPUT = {\n  callback: spiralOptionsChangeHandler,\n  label: \"Invert colors\",\n  name: \"invert\",\n  value: true,\n};\n\nSPIRAL_OPTIONS_INPUTS.forEach((inputData) => {\n  spiralOptionsDiv.appendChild(createOption(inputData));\n});\n\nspiralOptionsDiv.appendChild(createCheckboxOption(SPIRAL_INVERT_INPUT));\n\n// Create spiral instance\nconst spiral = new VertigoSpiral(spiralOptions);\n\n// Show SVG\nspiralSvgWrapper.appendChild(spiral.svg);\n\n// On file input change convert it\nspiralFileInput.addEventListener(\"change\", () => {\n  const file: File = spiralFileInput.files[0];\n  const imageURL = URL.createObjectURL(file);\n\n  spiral.convertImage(imageURL);\n});\n\n// Download SVG\nspiralDownloadButton.addEventListener(\"click\", () => downloadSVG(spiral, \"spiral\"));\n\n// Convert hello image on load\nspiral.convertImage(helloImage.getAttribute(\"src\"));\n\n// --------- TEST IMAGES\n\nconst exampleButtons: NodeListOf<HTMLImageElement> = document.querySelectorAll(\".examples-button\");\n\n// Connect buttons to draw test images\n// IE can't forEach through NodeList\n// so we need to call Array.prototype.slice\nArray.prototype.slice.call(exampleButtons).forEach((button) => {\n  button.addEventListener(\"click\", (e) => {\n    const image = document.querySelector(e.target.getAttribute(\"data-image\"));\n    const imageURL = image.getAttribute(\"src\");\n    const type = e.target.getAttribute(\"data-type\");\n\n    if (type === \"dots\") {\n      vertigo.convertImage(imageURL);\n    } else {\n      spiral.convertImage(imageURL);\n    }\n  });\n});\n\n// --------- DEBUG\n\nconst toggleDebugButton = document.querySelector(\".toggle-debug\");\n\ntoggleDebugButton.addEventListener(\"click\", () => {\n  if (!!window.localStorage.getItem(\"VERTIGO_DEBUG\")) {\n    window.localStorage.removeItem(\"VERTIGO_DEBUG\");\n  } else {\n    window.localStorage.setItem(\"VERTIGO_DEBUG\", \"1\");\n  }\n\n  window.location.replace(\"/\");\n});\n"],
  "mappings": "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",
  "names": ["b", "a", "c", "d", "g", "e", "f", "h", "i", "j", "k", "l", "m", "module", "isClient", "DEBUG", "MAXIMUM_BRIGHTNESS", "DOT_INCREMENT_STEP", "dotsDefaultOptions", "spiralDefaultOptions", "toFixed", "number", "numberOfDecimalSpaces", "getRectBrightness", "ctx", "x", "y", "rectWidth", "imageData", "brightness", "k", "r", "g", "b", "a", "COLORS_COUNT", "createSvg", "svgSize", "moveToCenter", "className", "svg", "min", "mapRange", "value", "inputRange", "outputMin", "outputMax", "outputRange", "drawImageOnCanvas", "imageSrc", "size", "callback", "canvas", "image", "yOffset", "xOffset", "imageSize", "getDotSizeFromRect", "brightness", "minimumDotRadius", "maximumDotRadius", "circleSize", "mapRange", "MAXIMUM_BRIGHTNESS", "toFixed", "getRectCornerFromCenter", "r", "angle", "rectangleSize", "size", "rectCenterX", "rectCenterY", "x", "y", "convertImageToDots", "imageSrc", "customOptions", "callback", "options", "__spreadValues", "dotsDefaultOptions", "drawImageOnCanvas", "canvas", "ctx", "convertedImage", "helperRectangles", "getRectBrightness", "DEBUG", "i", "dotCount", "DOT_INCREMENT_STEP", "dotAngleStep", "j", "rect", "Vertigo", "options", "__spreadValues", "dotsDefaultOptions", "svgSize", "createSvg", "x", "y", "dotRadius", "className", "dot", "centralDot", "i", "r", "dotCount", "DOT_INCREMENT_STEP", "dotAngleStep", "j", "angle", "dotScale", "xNumber", "centerLine", "d", "plotDot", "image", "dots", "_a", "circle", "imageURL", "callback", "convertImageToDots", "convertedImage", "newOptions", "convertImageToSpiral", "imageSrc", "customOptions", "callback", "options", "__spreadValues", "spiralDefaultOptions", "drawImageOnCanvas", "canvas", "ctx", "helperRectangles", "convertedImage", "center", "rectangleSize", "distance", "maxAngle", "angleIncrementStep", "angle", "r", "x", "toFixed", "brightness", "getRectBrightness", "width", "mapRange", "MAXIMUM_BRIGHTNESS", "DEBUG", "rect", "lineProperties", "pointA", "pointB", "lengthX", "lengthY", "controlPoint", "current", "previous", "next", "reverse", "o", "angle", "length", "x", "y", "bezierCommand", "point", "i", "a", "cps", "cpe", "smoothLine", "points", "firstCommand", "acc", "SVG_SIZE", "VertigoSpiral", "options", "__spreadValues", "spiralDefaultOptions", "createSvg", "imageURL", "callback", "convertImageToSpiral", "convertedImage", "previousDot", "dot", "nextDot", "angle1", "offset", "angle2", "angle", "toFixed", "halfWidth", "point1", "point2", "a", "b", "c", "vectorBA", "vectorBC", "image", "pathOuter", "pathInner", "i", "currentDot", "od", "smoothLine", "plottingImageCopy", "point", "centralLine", "centralLinePath", "step", "d", "path", "plotDot", "newOptions", "import_file_saver", "createOption", "callback", "label", "max", "min", "name", "step", "value", "helperText", "focus", "labelName", "spanValue", "input", "e", "divOption", "createCheckboxOption", "icon", "namingMap", "downloadSVG", "instance", "type", "options", "key", "shortOptionName", "getRandomScale", "random", "toFixed", "generateRandomImage", "resolution", "image", "dotStep", "dotCount", "j", "generate_random_image_default", "helloImage", "dotsOutputContent", "dotsSvgWrapper", "dotsFileInput", "dotsOptionsDiv", "dotsDownloadButton", "dotsRandomButton", "dotsOptions", "dotOptionsChangeHandler", "name", "value", "vertigo", "DOTS_OPTIONS_INPUTS", "DOTS_INVERT_INPUT", "inputData", "createOption", "createCheckboxOption", "Vertigo", "file", "imageURL", "downloadSVG", "generate_random_image_default", "spiralOptionsDiv", "spiralDownloadButton", "spiralFileInput", "spiralSvgWrapper", "spiralOutputContent", "spiralOptions", "spiralOptionsChangeHandler", "spiral", "SPIRAL_OPTIONS_INPUTS", "SPIRAL_INVERT_INPUT", "VertigoSpiral", "exampleButtons", "button", "e", "toggleDebugButton"]
}
