{
  "version": 3,
  "sources": ["../../node_modules/file-saver/src/FileSaver.js", "../../src/constants.ts", "../../src/helpers.ts", "../../src/convert-image-to-dots.ts", "../../src/vertigo.ts", "../../src/convert-image-to-spiral.ts", "../../src/smooth-line.ts", "../../src/spiral.ts", "../../src/demo-helpers.ts", "../../src/generate-random-image.ts", "../src/docs.ts"],
  "sourcesContent": ["/*\n* FileSaver.js\n* A saveAs() FileSaver implementation.\n*\n* By Eli Grey, http://eligrey.com\n*\n* License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)\n* source  : http://purl.eligrey.com/github/FileSaver.js\n*/\n\n// The one and only way of getting global scope in all environments\n// https://stackoverflow.com/q/3277182/1008999\nvar _global = typeof window === 'object' && window.window === window\n  ? window : typeof self === 'object' && self.self === self\n  ? self : typeof global === 'object' && global.global === global\n  ? global\n  : this\n\nfunction bom (blob, opts) {\n  if (typeof opts === 'undefined') opts = { autoBom: false }\n  else if (typeof opts !== 'object') {\n    console.warn('Deprecated: Expected third argument to be a object')\n    opts = { autoBom: !opts }\n  }\n\n  // prepend BOM for UTF-8 XML and text/* types (including HTML)\n  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n  if (opts.autoBom && /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n    return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type })\n  }\n  return blob\n}\n\nfunction download (url, name, opts) {\n  var xhr = new XMLHttpRequest()\n  xhr.open('GET', url)\n  xhr.responseType = 'blob'\n  xhr.onload = function () {\n    saveAs(xhr.response, name, opts)\n  }\n  xhr.onerror = function () {\n    console.error('could not download file')\n  }\n  xhr.send()\n}\n\nfunction corsEnabled (url) {\n  var xhr = new XMLHttpRequest()\n  // use sync to avoid popup blocker\n  xhr.open('HEAD', url, false)\n  try {\n    xhr.send()\n  } catch (e) {}\n  return xhr.status >= 200 && xhr.status <= 299\n}\n\n// `a.click()` doesn't work for all browsers (#465)\nfunction click (node) {\n  try {\n    node.dispatchEvent(new MouseEvent('click'))\n  } catch (e) {\n    var evt = document.createEvent('MouseEvents')\n    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80,\n                          20, false, false, false, false, 0, null)\n    node.dispatchEvent(evt)\n  }\n}\n\n// Detect WebView inside a native macOS app by ruling out all browsers\n// We just need to check for 'Safari' because all other browsers (besides Firefox) include that too\n// https://www.whatismybrowser.com/guides/the-latest-user-agent/macos\nvar isMacOSWebView = _global.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent)\n\nvar saveAs = _global.saveAs || (\n  // probably in some web worker\n  (typeof window !== 'object' || window !== _global)\n    ? function saveAs () { /* noop */ }\n\n  // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView\n  : ('download' in HTMLAnchorElement.prototype && !isMacOSWebView)\n  ? function saveAs (blob, name, opts) {\n    var URL = _global.URL || _global.webkitURL\n    var a = document.createElement('a')\n    name = name || blob.name || 'download'\n\n    a.download = name\n    a.rel = 'noopener' // tabnabbing\n\n    // TODO: detect chrome extensions & packaged apps\n    // a.target = '_blank'\n\n    if (typeof blob === 'string') {\n      // Support regular links\n      a.href = blob\n      if (a.origin !== location.origin) {\n        corsEnabled(a.href)\n          ? download(blob, name, opts)\n          : click(a, a.target = '_blank')\n      } else {\n        click(a)\n      }\n    } else {\n      // Support blobs\n      a.href = URL.createObjectURL(blob)\n      setTimeout(function () { URL.revokeObjectURL(a.href) }, 4E4) // 40s\n      setTimeout(function () { click(a) }, 0)\n    }\n  }\n\n  // Use msSaveOrOpenBlob as a second approach\n  : 'msSaveOrOpenBlob' in navigator\n  ? function saveAs (blob, name, opts) {\n    name = name || blob.name || 'download'\n\n    if (typeof blob === 'string') {\n      if (corsEnabled(blob)) {\n        download(blob, name, opts)\n      } else {\n        var a = document.createElement('a')\n        a.href = blob\n        a.target = '_blank'\n        setTimeout(function () { click(a) })\n      }\n    } else {\n      navigator.msSaveOrOpenBlob(bom(blob, opts), name)\n    }\n  }\n\n  // Fallback to using FileReader and a popup\n  : function saveAs (blob, name, opts, popup) {\n    // Open a popup immediately do go around popup blocker\n    // Mostly only available on user interaction and the fileReader is async so...\n    popup = popup || open('', '_blank')\n    if (popup) {\n      popup.document.title =\n      popup.document.body.innerText = 'downloading...'\n    }\n\n    if (typeof blob === 'string') return download(blob, name, opts)\n\n    var force = blob.type === 'application/octet-stream'\n    var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari\n    var isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent)\n\n    if ((isChromeIOS || (force && isSafari) || isMacOSWebView) && typeof FileReader !== 'undefined') {\n      // Safari doesn't allow downloading of blob URLs\n      var reader = new FileReader()\n      reader.onloadend = function () {\n        var url = reader.result\n        url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;')\n        if (popup) popup.location.href = url\n        else location = url\n        popup = null // reverse-tabnabbing #460\n      }\n      reader.readAsDataURL(blob)\n    } else {\n      var URL = _global.URL || _global.webkitURL\n      var url = URL.createObjectURL(blob)\n      if (popup) popup.location = url\n      else location.href = url\n      popup = null // reverse-tabnabbing #460\n      setTimeout(function () { URL.revokeObjectURL(url) }, 4E4) // 40s\n    }\n  }\n)\n\n_global.saveAs = saveAs.saveAs = saveAs\n\nif (typeof module !== 'undefined') {\n  module.exports = saveAs;\n}\n", "// -- Global\n\nexport const isClient = typeof window !== \"undefined\";\n\nexport const DEBUG = isClient ? window.location.hash === \"#debug\" : false;\n\nexport const MAXIMUM_BRIGHTNESS = 255;\n\nexport interface IDot {\n  x: number;\n  y: number;\n}\n\n// -- Dots\n\n// How many dots are added with each concentric circle\nexport const DOT_INCREMENT_STEP: number = 6;\n\nexport interface IDotsOptions {\n  resolution: number;\n  minimumDotRadius: number;\n  maximumDotRadius: number;\n  distanceBetweenDots: number;\n  invert: boolean;\n  plottingStep: number;\n}\n\nexport interface IDotsOptionsPartial {\n  resolution?: number;\n  minimumDotRadius?: number;\n  maximumDotRadius?: number;\n  distanceBetweenDots?: number;\n  invert?: boolean;\n  plottingStep?: number;\n}\n\nexport const dotsDefaultOptions: IDotsOptions = {\n  // Number of concentric circles\n  resolution: 25,\n  // Minimum dot radius\n  minimumDotRadius: 1,\n  // Maximum dot radius\n  maximumDotRadius: 5,\n  // Distance between dots\n  distanceBetweenDots: 2,\n  // By default, images are drawn as white on black\n  // disable this option to get black on white\n  invert: true,\n  // For pen plotting\n  // draws concentric circles increasing radius by this step\n  plottingStep: 0,\n};\n\nexport type TDotsImage = number[][];\n\n// -- Spiral\n\nexport interface ISpiralOptions {\n  minimumLineWidth: number;\n  maximumLineWidth: number;\n  distanceBetweenLines: number;\n  startingRadius: number;\n  invert: boolean;\n  plottingStep: number;\n}\n\nexport interface ISpiralOptionsPartial {\n  minimumLineWidth?: number;\n  maximumLineWidth?: number;\n  distanceBetweenLines?: number;\n  startingRadius?: number;\n  invert?: boolean;\n  plottingStep?: number;\n}\n\nexport const spiralDefaultOptions: ISpiralOptions = {\n  // Minimum line width\n  minimumLineWidth: 1,\n  // Maximum line width\n  maximumLineWidth: 5,\n  // Distance between lines\n  distanceBetweenLines: 1,\n  // Starting radius\n  startingRadius: 4,\n  // By default, images are drawn as white on black\n  // disable this option to get black on white\n  invert: true,\n  // For pen plotting\n  // draws additional lines increasing gap by this step\n  plottingStep: 0,\n};\n\nexport interface ISpiralSegment {\n  x: number;\n  y: number;\n  width: number;\n}\n\nexport type TSpiralImage = ISpiralSegment[];\n", "export function toFixed(number: number, numberOfDecimalSpaces: number = 2): number {\n  return parseFloat(number.toFixed(numberOfDecimalSpaces));\n}\n\nexport function getRectBrightness(ctx: CanvasRenderingContext2D, x: number, y: number, rectWidth: number): number {\n  const imageData = ctx.getImageData(x, y, rectWidth, rectWidth);\n\n  let brightness = 0;\n\n  for (let k = 0; k < imageData.data.length; k += 4) {\n    const r = imageData.data[k];\n    const g = imageData.data[k + 1];\n    const b = imageData.data[k + 2];\n    const a = imageData.data[k + 3];\n\n    brightness += 0.299 * r + 0.587 * g + 0.114 * b;\n  }\n\n  const COLORS_COUNT = 4; // r g b a\n\n  return brightness / (imageData.data.length / COLORS_COUNT);\n}\n\nexport function createSvg(svgSize: number, moveToCenter: boolean, className: string): SVGElement {\n  const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n  const min = moveToCenter ? svgSize / -2 : 0;\n\n  svg.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\n  svg.setAttribute(\"class\", className);\n  svg.setAttribute(\"viewBox\", `${min} ${min} ${svgSize} ${svgSize}`);\n\n  return svg;\n}\n\nexport function mapRange(value: number, inputRange: number, outputMin: number, outputMax: number) {\n  const outputRange = outputMax - outputMin;\n  return (value / inputRange) * outputRange + outputMin;\n}\n\nexport function drawImageOnCanvas(imageSrc: string, size: 500, callback: (canvas: HTMLCanvasElement) => void) {\n  const canvas: HTMLCanvasElement = document.createElement(\"canvas\");\n  canvas.width = size;\n  canvas.height = size;\n\n  const ctx = canvas.getContext(\"2d\");\n\n  const image = new Image();\n  image.addEventListener(\"load\", () => {\n    // Get the largest square from the image\n    let yOffset = 0;\n    let xOffset = 0;\n    let imageSize;\n\n    if (image.height > image.width) {\n      yOffset = (image.height - image.width) / 2;\n      imageSize = image.width;\n    } else {\n      xOffset = (image.width - image.height) / 2;\n      imageSize = image.height;\n    }\n\n    ctx?.drawImage(image, xOffset, yOffset, imageSize, imageSize, 0, 0, size, size);\n\n    callback(canvas);\n  });\n\n  // Load image\n  image.src = imageSrc;\n}\n", "import { drawImageOnCanvas, getRectBrightness, mapRange, toFixed } from \"./helpers\";\nimport {\n  DEBUG,\n  DOT_INCREMENT_STEP,\n  dotsDefaultOptions,\n  IDotsOptions,\n  IDotsOptionsPartial,\n  MAXIMUM_BRIGHTNESS,\n  TDotsImage,\n} from \"./constants\";\n\nfunction getDotSizeFromRect(brightness, minimumDotRadius, maximumDotRadius) {\n  const circleSize = mapRange(brightness, MAXIMUM_BRIGHTNESS, minimumDotRadius, maximumDotRadius);\n\n  return toFixed(circleSize, 2);\n}\n\nfunction getRectCornerFromCenter(r, angle, rectangleSize, size) {\n  const rectCenterX = r * Math.cos(angle);\n  const rectCenterY = r * Math.sin(angle);\n\n  const x = rectCenterX - rectangleSize / 2 + size / 2;\n  const y = rectCenterY - rectangleSize / 2 + size / 2;\n\n  return {\n    x,\n    y,\n  };\n}\n\n// TODO low res\n// if (brightness < 100) {\n//   convertedImage[i][j] = 1;\n// } else if (brightness < 200) {\n//   convertedImage[i][j] = 2;\n// } else {\n//   convertedImage[i][j] = 4;\n// }\n\nexport default function convertImageToDots(\n  imageSrc: string,\n  customOptions: IDotsOptionsPartial,\n  callback: (convertedImage: TDotsImage) => void\n) {\n  const size = 500;\n\n  const options: IDotsOptions = {\n    ...dotsDefaultOptions,\n    ...customOptions,\n  };\n\n  drawImageOnCanvas(imageSrc, size, (canvas) => {\n    const ctx: CanvasRenderingContext2D = canvas.getContext(\"2d\");\n\n    const convertedImage: TDotsImage = [[]];\n    const rectangleSize = size / 2 / (options.resolution + 0.5);\n\n    const helperRectangles = [];\n\n    // Center dot\n    const { x, y } = getRectCornerFromCenter(0, 0, rectangleSize, size);\n    let brightness = getRectBrightness(ctx, x, y, rectangleSize);\n\n    if (!options.invert) {\n      brightness = 255 - brightness;\n    }\n\n    convertedImage[0][0] = getDotSizeFromRect(brightness, options.minimumDotRadius, options.maximumDotRadius);\n\n    if (DEBUG) {\n      helperRectangles.push({ x, y });\n    }\n\n    for (let i = 1; i <= options.resolution; i++) {\n      const r = i * rectangleSize;\n\n      const dotCount = i * DOT_INCREMENT_STEP;\n      const dotAngleStep = 360 / dotCount;\n\n      convertedImage[i] = [];\n\n      for (let j = 0; j < dotCount; j++) {\n        const angle = (Math.PI * (dotAngleStep * j)) / 180;\n\n        const { x, y } = getRectCornerFromCenter(r, angle, rectangleSize, size);\n\n        let brightness = getRectBrightness(ctx, x, y, rectangleSize);\n\n        if (!options.invert) {\n          brightness = 255 - brightness;\n        }\n\n        convertedImage[i][j] = getDotSizeFromRect(brightness, options.minimumDotRadius, options.maximumDotRadius);\n\n        if (DEBUG) {\n          helperRectangles.push({ x, y });\n        }\n      }\n    }\n\n    callback(convertedImage);\n\n    if (DEBUG) {\n      ctx.strokeStyle = \"orange\";\n\n      helperRectangles.forEach((rect) => {\n        ctx.strokeRect(rect.x, rect.y, rectangleSize, rectangleSize);\n      });\n\n      document.querySelector(\".Debug--dots\").innerHTML = \"\";\n      document.querySelector(\".Debug--dots\").appendChild(canvas);\n    }\n  });\n}\n", "import { DOT_INCREMENT_STEP, IDotsOptions, IDotsOptionsPartial, dotsDefaultOptions, TDotsImage } from \"./constants\";\n\nimport { createSvg } from \"./helpers\";\nimport convertImageToDots from \"./convert-image-to-dots\";\n\n// TODO\n//\n// * Dynamic dot size\n// * Performance?\n\ninterface IDot {\n  element: SVGCircleElement;\n  x: string;\n  y: string;\n  scale: number;\n}\n\ntype TConvertCallback = (convertedImage: TDotsImage) => void;\n\nexport default class Vertigo {\n  private options: IDotsOptions;\n  private dots?: IDot[][];\n  private radiusGrowStep: number;\n  private imageURL: string | null = null;\n\n  public svg: SVGElement;\n\n  constructor(options?: IDotsOptionsPartial) {\n    this.options = {\n      ...dotsDefaultOptions,\n      ...options,\n    };\n\n    this.radiusGrowStep = this.options.maximumDotRadius * 2 + this.options.distanceBetweenDots;\n\n    const size = this.options.resolution * 2 * this.radiusGrowStep;\n    const svgSize = size + this.options.maximumDotRadius * 2;\n\n    this.svg = createSvg(svgSize, true, \"Vertigo\");\n\n    this.generateDots();\n  }\n\n  private static createDot(x: string, y: string, dotRadius: number, className = \"Dots-dot\"): IDot {\n    const dot = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\n    dot.setAttribute(\"class\", className);\n    dot.setAttribute(\"cx\", x);\n    dot.setAttribute(\"cy\", y);\n    dot.setAttribute(\"r\", dotRadius.toString());\n\n    return {\n      element: dot,\n      x,\n      y,\n      scale: 1,\n    };\n  }\n\n  private generateDots() {\n    // Create central dot\n    const centralDot = Vertigo.createDot(\"0\", \"0\", this.options.minimumDotRadius);\n\n    this.dots = [[centralDot]];\n\n    this.svg.appendChild(centralDot.element);\n\n    for (let i = 1; i <= this.options.resolution; i++) {\n      const r = i * this.radiusGrowStep;\n\n      const dotCount = i * DOT_INCREMENT_STEP;\n      const dotAngleStep = 360 / dotCount;\n\n      this.dots[i] = [];\n\n      for (let j = 0; j < dotCount; j++) {\n        const angle = (Math.PI * (dotAngleStep * j)) / 180;\n\n        const x = (r * Math.cos(angle)).toFixed(3);\n        const y = (r * Math.sin(angle)).toFixed(3);\n\n        const dot = Vertigo.createDot(x, y, this.options.minimumDotRadius);\n\n        this.dots[i].push(dot);\n\n        this.svg.appendChild(dot.element);\n      }\n    }\n  }\n\n  private generatePlottingHelpers(dotScale: number, dot: IDot) {\n    const x = dot.element.getAttribute(\"cx\") as string;\n    const y = dot.element.getAttribute(\"cy\") as string;\n    const xNumber = parseFloat(x);\n\n    const className = \"Dots-plottingHelper\";\n\n    // Skip center line if dotScale is smaller than threshold\n    if (dotScale > 1) {\n      const centerLine = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n      const d = `M ${xNumber - 0.1} ${y} L ${xNumber + 0.1} ${y}`;\n      centerLine.setAttribute(\"d\", d);\n      centerLine.setAttribute(\"class\", className);\n      this.svg.appendChild(centerLine);\n    }\n\n    for (let r = this.options.plottingStep; r < dotScale; r += this.options.plottingStep) {\n      const plotDot = Vertigo.createDot(x, y, r, className);\n\n      this.svg.appendChild(plotDot.element);\n    }\n  }\n\n  public drawImage(image: TDotsImage) {\n    // Remove saved image file because we are drawing a custom image\n    this.imageURL = null;\n\n    // Remove all plotting dot helpers\n    this.svg.querySelectorAll(\".Dots-plottingHelper\").forEach((plotDot) => {\n      this.svg.removeChild(plotDot);\n    });\n\n    image.forEach((dots: number[], i: number) => {\n      dots.forEach((dotScale: number, j: number) => {\n        const circle = this.dots?.[i];\n\n        if (circle) {\n          const dot = circle[j];\n\n          if (dot.scale !== dotScale) {\n            dot.scale = dotScale;\n\n            dot.element.setAttribute(\"r\", dotScale.toString());\n          }\n\n          if (this.options.plottingStep > 0) {\n            this.generatePlottingHelpers(dotScale, dot);\n          }\n        }\n      });\n    });\n  }\n\n  public convertImage(imageURL: string, callback?: TConvertCallback) {\n    convertImageToDots(imageURL, this.options, (convertedImage: TDotsImage) => {\n      this.drawImage(convertedImage);\n      this.imageURL = imageURL;\n\n      if (callback) {\n        callback(convertedImage);\n      }\n    });\n  }\n\n  private removeDots() {\n    this.dots?.forEach((circle) => {\n      circle.forEach((dot) => {\n        dot.element.parentNode?.removeChild(dot.element);\n      });\n    });\n  }\n\n  public setOptions(newOptions: IDotsOptionsPartial, callback?: TConvertCallback) {\n    this.options = {\n      ...this.options,\n      ...newOptions,\n    };\n\n    this.radiusGrowStep = this.options.maximumDotRadius * 2 + this.options.distanceBetweenDots;\n\n    const size = this.options.resolution * 2 * this.radiusGrowStep;\n    const svgSize = size + this.options.maximumDotRadius * 2;\n\n    // Update svg size\n    this.svg.setAttribute(\"viewBox\", `${svgSize / -2} ${svgSize / -2} ${svgSize} ${svgSize}`);\n\n    this.removeDots();\n    this.generateDots();\n\n    if (this.imageURL) {\n      this.convertImage(this.imageURL, callback);\n    }\n  }\n\n  public getOptions() {\n    return { ...this.options };\n  }\n}\n", "import { drawImageOnCanvas, getRectBrightness, mapRange, toFixed } from \"./helpers\";\nimport {\n  DEBUG,\n  ISpiralOptions,\n  ISpiralOptionsPartial,\n  MAXIMUM_BRIGHTNESS,\n  spiralDefaultOptions,\n  TSpiralImage,\n} from \"./constants\";\n\nexport default function convertImageToSpiral(\n  imageSrc: string,\n  customOptions: ISpiralOptionsPartial,\n  callback: (convertedImage: TSpiralImage) => void\n) {\n  const size = 500;\n\n  const options: ISpiralOptions = {\n    ...spiralDefaultOptions,\n    ...customOptions,\n  };\n\n  drawImageOnCanvas(imageSrc, size, (canvas) => {\n    const ctx: CanvasRenderingContext2D = canvas.getContext(\"2d\");\n    const helperRectangles = [];\n    const convertedImage: TSpiralImage = [];\n\n    const center = size / 2;\n\n    // Experiment with the size of the rectangle\n    const rectangleSize = Math.round((options.distanceBetweenLines + options.maximumLineWidth) * 0.8);\n\n    const distance = (options.distanceBetweenLines + options.maximumLineWidth) / (2 * Math.PI);\n\n    // Size of the image, minus the width of the starting circle\n    // divided by the distance between lines\n    const maxHalfRotationsCount = Math.floor(\n      (size - options.startingRadius * 2) / (options.distanceBetweenLines + options.maximumLineWidth)\n    );\n\n    // Maximum spiral angle\n    const maxAngle = maxHalfRotationsCount * Math.PI; // size / 2.1 / distance; // In radians\n\n    let angleIncrementStep = 3 / options.startingRadius;\n\n    for (let angle = 0; angle < maxAngle; angle += angleIncrementStep) {\n      const r = options.startingRadius + distance * angle;\n      const x = toFixed(center + r * Math.cos(angle), 3);\n      const y = toFixed(center + r * Math.sin(angle), 3);\n\n      helperRectangles.push({ x, y });\n\n      let brightness = getRectBrightness(ctx, x, y, rectangleSize);\n\n      if (!options.invert) {\n        brightness = 255 - brightness;\n      }\n\n      const width = mapRange(brightness, MAXIMUM_BRIGHTNESS, options.minimumLineWidth, options.maximumLineWidth);\n\n      angleIncrementStep = 3 / r;\n\n      convertedImage.push({\n        x,\n        y,\n        width,\n      });\n    }\n\n    callback(convertedImage);\n\n    if (DEBUG) {\n      ctx.strokeStyle = \"orange\";\n\n      helperRectangles.forEach((rect) => {\n        ctx.strokeRect(rect.x, rect.y, rectangleSize, rectangleSize);\n      });\n\n      document.querySelector(\".Debug--spiral\").innerHTML = \"\";\n      document.querySelector(\".Debug--spiral\").appendChild(canvas);\n    }\n  });\n}\n", "// The smoothing ratio\nconst smoothing = 0.2;\n\n// Properties of a line\n// I:  - pointA (array) [x,y]: coordinates\n//     - pointB (array) [x,y]: coordinates\n// O:  - (object) { length: l, angle: a }: properties of the line\nconst lineProperties = (pointA, pointB) => {\n  const lengthX = pointB.x - pointA.x;\n  const lengthY = pointB.y - pointA.y;\n\n  return {\n    length: Math.sqrt(Math.pow(lengthX, 2) + Math.pow(lengthY, 2)),\n    angle: Math.atan2(lengthY, lengthX),\n  };\n};\n\n// Position of a control point\n// I:  - current (array) [x, y]: current point coordinates\n//     - previous (array) [x, y]: previous point coordinates\n//     - next (array) [x, y]: next point coordinates\n//     - reverse (boolean, optional): sets the direction\n// O:  - (array) [x,y]: a tuple of coordinates\nconst controlPoint = (current, previous, next, reverse = false) => {\n  // When 'current' is the first or last point of the array\n  // 'previous' or 'next' don't exist.\n  // Replace with 'current'\n  const p = previous || current;\n  const n = next || current;\n\n  // Properties of the opposed-line\n  const o = lineProperties(p, n);\n\n  // If is end-control-point, add PI to the angle to go backward\n  const angle = o.angle + (reverse ? Math.PI : 0);\n  const length = o.length * smoothing;\n\n  // The control point position is relative to the current point\n  const x = current.x + Math.cos(angle) * length;\n  const y = current.y + Math.sin(angle) * length;\n  return { x, y };\n};\n\n// Create the bezier curve command\n// I:  - point (array) [x,y]: current point coordinates\n//     - i (integer): index of 'point' in the array 'a'\n//     - a (array): complete array of points coordinates\n// O:  - (string) 'C x2,y2 x1,y1 x,y': SVG cubic bezier C command\nconst bezierCommand = (point, i, a) => {\n  // start control point\n  const cps = controlPoint(a[i - 1], a[i - 2], point);\n\n  // end control point\n  const cpe = controlPoint(point, a[i - 1], a[i + 1], true);\n\n  return `C ${cps.x},${cps.y} ${cpe.x},${cpe.y} ${point.x},${point.y}`;\n};\n\nexport default function smoothLine(points, shouldClose = true) {\n  // build the d attributes by looping over the points\n  const d = points.reduce((acc, point, i, a) => {\n    if (i === 0) {\n      return `M ${point.x},${point.y}`;\n    }\n\n    return `${acc} ${bezierCommand(point, i, a)}`;\n  }, \"\");\n\n  if (shouldClose) {\n    return `${d} Z`;\n  } else {\n    return d;\n  }\n}\n", "import { IDot, ISpiralOptions, ISpiralOptionsPartial, spiralDefaultOptions, TSpiralImage } from \"./constants\";\nimport { createSvg, toFixed } from \"./helpers\";\n\nimport convertImageToSpiral from \"./convert-image-to-spiral\";\nimport smoothLine from \"./smooth-line\";\n\ntype TSpiralConvertCallback = (convertedImage: TSpiralImage) => void;\n\nconst SVG_SIZE = 500;\n\nexport default class VertigoSpiral {\n  private options: ISpiralOptions;\n  private imageURL: string | null = null;\n  private svgPath: SVGPathElement;\n\n  public svg: SVGElement;\n\n  constructor(options?: ISpiralOptionsPartial) {\n    this.options = {\n      ...spiralDefaultOptions,\n      ...options,\n    };\n\n    this.svg = createSvg(SVG_SIZE, false, \"Spiral\");\n\n    this.svgPath = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n    this.svgPath.setAttribute(\"class\", \"Spiral-path\");\n\n    this.svg.appendChild(this.svgPath);\n  }\n\n  public convertImage(imageURL: string, callback?: TSpiralConvertCallback) {\n    convertImageToSpiral(imageURL, this.options, (convertedImage: TSpiralImage) => {\n      this.drawImage(convertedImage);\n      this.imageURL = imageURL;\n\n      if (callback) {\n        callback(convertedImage);\n      }\n    });\n  }\n\n  // Takes three dots and returns two dots,\n  // a vector which direction is half angle between these three dots\n  // and velocity is equal to a spiral line's width at that dot\n  /*\n                          \u2022 outerDots[0]\n                         /\n                        /\n    previousDot \u2022------\u2022 dot\n                      / \\\n                     /   \u2022 nextDot\n       outerDots[1] \u2022\n  */\n  private static getOuterDots(previousDot, dot, nextDot) {\n    // Angle between (previosDot, dot) vector and x axis\n    /*\n    previousDot \u2022------\u2022 dot\n               angle1 / \\\n                     /   \u2022 nextDot\n    */\n    let angle1 = VertigoSpiral.getAngleBetweenThreeDots(previousDot, dot, nextDot) / 2;\n\n    let offset = 100;\n\n    if (angle1 > 0) {\n      offset = -100;\n    }\n    // Angle between (previosDot, dot) vector and x axis\n    /*\n                 dot \u2022--------\u2022 (dot.x + offset, dot.y)\n                    / angle2\n                   /\n      previousDot \u2022\n    */\n    const angle2 = VertigoSpiral.getAngleBetweenThreeDots(previousDot, dot, {\n      x: dot.x + offset, // Moving dot on x axis\n      y: dot.y,\n    });\n\n    // Angle between the x axis and the half angle vector\n    const angle = toFixed(angle2 - angle1, 2);\n\n    const halfWidth = dot.width / 2;\n\n    const point1 = {\n      x: toFixed(dot.x + halfWidth * Math.cos(angle), 2),\n      y: toFixed(dot.y - halfWidth * Math.sin(angle), 2),\n    };\n\n    const point2 = {\n      x: toFixed(dot.x + halfWidth * Math.cos(angle + Math.PI), 2),\n      y: toFixed(dot.y - halfWidth * Math.sin(angle + Math.PI), 2),\n    };\n\n    const outerDots = [point1, point2];\n\n    return outerDots;\n  }\n\n  private static getVector(a, b) {\n    return {\n      x: a.x - b.x,\n      y: a.y - b.y,\n    };\n  }\n\n  private static getAngleBetweenThreeDots(a, b, c) {\n    const vectorBA = VertigoSpiral.getVector(b, a);\n    const vectorBC = VertigoSpiral.getVector(b, c);\n\n    const angle = Math.atan2(vectorBC.y, vectorBC.x) - Math.atan2(vectorBA.y, vectorBA.x);\n\n    return angle;\n  }\n\n  generatePath(image) {\n    // Setting starting dot, based on \"startingRadius\"\n    // Spiral always starts from PI angle, that's why it's moved to the \"right\"\n    // (in other words, adding \"r\" to the \"x\" axis coordinate)\n    // while keeping y coordinate centered\n    const pathOuter = [];\n    const pathInner = [];\n\n    // We need three dots to draw a bezier,\n    // that's why loop starts from 1 and ends on length - 1\n    for (let i = 1; i < image.length - 1; i++) {\n      const previousDot = image[i - 1];\n      const currentDot = image[i];\n      const nextDot = image[i + 1];\n\n      const od = VertigoSpiral.getOuterDots(previousDot, currentDot, nextDot);\n\n      pathOuter.push(od[0]);\n      pathInner.push(od[1]);\n    }\n\n    const pathPoints = [...pathOuter, ...pathInner.reverse()];\n\n    return smoothLine(pathPoints);\n  }\n\n  private generatePlottingHelpers(image) {\n    const plottingImageCopy = image.map((point) => ({ ...point }));\n    const centralLine = image.map((point) => ({ ...point }));\n    // Removing the first and the last point\n    // for the central line as they are not used by \"generatePath\"\n    centralLine.shift();\n    centralLine.pop();\n\n    const centralLinePath = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n    centralLinePath.setAttribute(\"class\", \"Spiral-plottingHelper\");\n    centralLinePath.setAttribute(\"d\", smoothLine(centralLine, false));\n\n    this.svg.appendChild(centralLinePath);\n\n    for (\n      let step = this.options.plottingStep;\n      step < this.options.maximumLineWidth;\n      step += this.options.plottingStep\n    ) {\n      plottingImageCopy.forEach((point) => {\n        point.width = point.width - this.options.plottingStep;\n\n        if (point.width < 0) {\n          point.width = 0;\n        }\n      });\n      const d = this.generatePath(plottingImageCopy);\n\n      const path = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n      path.setAttribute(\"class\", \"Spiral-plottingHelper\");\n      path.setAttribute(\"d\", d);\n\n      this.svg.appendChild(path);\n    }\n  }\n\n  public drawImage(image) {\n    this.svgPath.setAttribute(\"d\", this.generatePath(image));\n\n    // Remove all plotting lines helpers\n    this.svg.querySelectorAll(\".Spiral-plottingHelper\").forEach((plotDot) => {\n      this.svg.removeChild(plotDot);\n    });\n\n    if (this.options.plottingStep > 0) {\n      this.generatePlottingHelpers(image);\n    }\n  }\n\n  public setOptions(newOptions: ISpiralOptionsPartial, callback?: TSpiralConvertCallback) {\n    this.options = {\n      ...this.options,\n      ...newOptions,\n    };\n\n    if (this.imageURL) {\n      this.convertImage(this.imageURL, callback);\n    }\n  }\n\n  public getOptions() {\n    return { ...this.options };\n  }\n}\n", "import { saveAs } from \"file-saver\";\n\nexport function createOption({ callback, label, max, min, name, step = 1, value }) {\n  const spanRange = document.createElement(\"span\");\n  spanRange.innerHTML = `(${min} - ${max})`;\n\n  const labelName = document.createElement(\"label\");\n  labelName.innerHTML = `${label}: `;\n  labelName.appendChild(spanRange);\n\n  const spanValue = document.createElement(\"span\");\n  spanValue.innerHTML = ` ${value}`;\n\n  const input = document.createElement(\"input\");\n  input.setAttribute(\"type\", \"range\");\n  input.setAttribute(\"min\", min);\n  input.setAttribute(\"max\", max);\n  input.setAttribute(\"value\", value);\n  input.setAttribute(\"step\", step.toString());\n  input.setAttribute(\"class\", `OptionsInput OptionsInput--${name}`);\n  input.addEventListener(\"change\", (e) => {\n    const value = (e.target as HTMLInputElement).value;\n    callback(name, value);\n    spanValue.innerHTML = ` ${value}`;\n  });\n\n  const divOption = document.createElement(\"div\");\n  divOption.appendChild(labelName);\n  divOption.appendChild(input);\n  divOption.appendChild(spanValue);\n\n  return divOption;\n}\n\nexport function createCheckboxOption({ callback, label, name, value }) {\n  const labelName = document.createElement(\"label\");\n  labelName.innerHTML = ` ${label}`;\n\n  const input = document.createElement(\"input\");\n  input.setAttribute(\"type\", \"checkbox\");\n  input.setAttribute(\"checked\", value);\n  input.setAttribute(\"class\", `OptionsInput OptionsInput--${name}`);\n  input.addEventListener(\"change\", (e) => {\n    callback(name, (e.target as HTMLInputElement).checked);\n  });\n\n  labelName.prepend(input);\n\n  const divOption = document.createElement(\"div\");\n  divOption.appendChild(labelName);\n\n  return divOption;\n}\n\nconst namingMap = {\n  distanceBetweenDots: \"dist\",\n  distanceBetweenLines: \"dist\",\n  startingRadius: \"start\",\n};\n\nexport function downloadSVG(instance, type) {\n  const options = instance.getOptions();\n\n  console.log(instance.imageURL);\n\n  let name = type;\n\n  Object.keys(options).forEach((key) => {\n    const shortOptionName = namingMap[key] || key.substr(0, 3);\n    name += `_${shortOptionName}-${options[key]}`;\n  });\n\n  name += \".svg\";\n\n  saveAs(`data:application/octet-stream;base64,${btoa(instance.svg.outerHTML)}`, name);\n}\n", "import { toFixed } from \"./helpers\";\n\nfunction getRandomScale() {\n  const random: number = Math.random() * 3 + 1;\n\n  return toFixed(random, 2);\n}\n\nfunction generateRandomImage(resolution: number) {\n  const image = [\n    // Center dot\n    [getRandomScale()],\n  ];\n\n  const dotStep: number = 6;\n\n  for (let i: number = 1; i <= resolution; i++) {\n    const dotCount: number = i * dotStep;\n    image[i] = [];\n\n    for (let j = 0; j < dotCount; j++) {\n      image[i].push(getRandomScale());\n    }\n  }\n\n  return image;\n}\n\nexport default generateRandomImage;\n", "import Vertigo from \"../../src/vertigo\";\nimport VertigoSpiral from \"../../src/spiral\";\nimport { ISpiralOptions, IDotsOptions } from \"../../src/constants\";\nimport { createOption, createCheckboxOption, downloadSVG } from \"../../src/demo-helpers\";\nimport generateRandomImage from \"../../src/generate-random-image\";\n\nconst helloImage: HTMLElement = document.querySelector(\".TestImage--hello\");\n\n// ------- DOTS\n\nconst dotsSvgWrapperInner: HTMLElement = document.querySelector(\".SvgWrapper-inner--dots\");\nconst dotsSvgWrapper: HTMLElement = document.querySelector(\".SvgWrapper-svg--dots\");\nconst dotsFileInput: HTMLInputElement = document.querySelector(\".FileInput--dots\");\nconst dotsOptionsDiv: HTMLElement = document.querySelector(\".Options--dots\");\n\nconst dotsDownloadButton: HTMLAnchorElement = document.querySelector(\".Button--dotsDownload\");\nconst dotsRandomButton: HTMLButtonElement = document.querySelector(\".Button--dotsRandom\");\n\nconst dotsOptions: IDotsOptions = {\n  minimumDotRadius: 1,\n  maximumDotRadius: 5,\n  distanceBetweenDots: 1,\n  resolution: 25,\n  invert: true,\n  plottingStep: 0,\n};\n\nfunction dotOptionsChangeHandler(name, value) {\n  // Update global options object\n  dotsOptions[name] = parseFloat(value);\n\n  if (name === \"invert\") {\n    dotsOptions[name] = Boolean(value);\n\n    if (dotsOptions[name]) {\n      dotsSvgWrapperInner.classList.add(\"SvgWrapper-inner--invert\");\n    } else {\n      dotsSvgWrapperInner.classList.remove(\"SvgWrapper-inner--invert\");\n    }\n  }\n\n  // Redraw vertigo with new options\n  vertigo.setOptions(dotsOptions);\n}\n\nconst DOTS_OPTIONS_INPUTS = [\n  {\n    callback: dotOptionsChangeHandler,\n    label: \"Resolution\",\n    max: 50,\n    min: 5,\n    name: \"resolution\",\n    value: 25,\n  },\n  {\n    callback: dotOptionsChangeHandler,\n    label: \"Minimum dot radius\",\n    max: 5,\n    min: 0,\n    name: \"minimumDotRadius\",\n    value: 1,\n  },\n  {\n    callback: dotOptionsChangeHandler,\n    label: \"Maximum dot radius\",\n    max: 20,\n    min: 1,\n    name: \"maximumDotRadius\",\n    value: 5,\n  },\n  {\n    callback: dotOptionsChangeHandler,\n    label: \"Distance between dots\",\n    max: 20,\n    min: 0,\n    name: \"distanceBetweenDots\",\n    value: 1,\n  },\n  {\n    callback: dotOptionsChangeHandler,\n    label: \"Plotting step\",\n    max: 5,\n    min: 0,\n    name: \"plottingStep\",\n    value: 0,\n    step: 0.1,\n  },\n];\n\nconst DOTS_INVERT_INPUT = {\n  callback: dotOptionsChangeHandler,\n  label: \"Invert colors\",\n  name: \"invert\",\n  value: true,\n};\n\nDOTS_OPTIONS_INPUTS.forEach((inputData) => {\n  dotsOptionsDiv.appendChild(createOption(inputData));\n});\n\ndotsOptionsDiv.appendChild(createCheckboxOption(DOTS_INVERT_INPUT));\n\n// Create vertigo instance\nconst vertigo = new Vertigo(dotsOptions);\n\n// Show SVG\ndotsSvgWrapper.appendChild(vertigo.svg);\n\n// On file input change convert it\ndotsFileInput.addEventListener(\"change\", () => {\n  const file: File = dotsFileInput.files[0];\n  const imageURL = URL.createObjectURL(file);\n\n  vertigo.convertImage(imageURL);\n});\n\n// Download SVG\ndotsDownloadButton.addEventListener(\"click\", () => downloadSVG(vertigo, \"vertigo\"));\n\n// Draw random image\ndotsRandomButton.addEventListener(\"click\", () => {\n  vertigo.drawImage(generateRandomImage(vertigo.getOptions().resolution));\n});\n\n// On load draw hello image :)\nvertigo.convertImage(helloImage.getAttribute(\"src\"));\n\n// -------------- SPIRAL\n\nconst spiralOptionsDiv: HTMLElement = document.querySelector(\".Options--spiral\");\nconst spiralDownloadButton: HTMLAnchorElement = document.querySelector(\".Button--spiralDownload\");\nconst spiralFileInput: HTMLInputElement = document.querySelector(\".FileInput--spiral\");\nconst spiralSvgWrapper: HTMLElement = document.querySelector(\".SvgWrapper-svg--spiral\");\nconst spiralSvgWrapperInner: HTMLElement = document.querySelector(\".SvgWrapper-inner--spiral\");\n\nconst spiralOptions: ISpiralOptions = {\n  minimumLineWidth: 1,\n  maximumLineWidth: 5,\n  distanceBetweenLines: 1,\n  startingRadius: 3,\n  invert: true,\n  plottingStep: 0,\n};\n\nfunction spiralOptionsChangeHandler(name, value) {\n  // Update global options object\n  spiralOptions[name] = parseFloat(value);\n\n  if (name === \"invert\") {\n    spiralOptions[name] = Boolean(value);\n\n    if (spiralOptions[name]) {\n      spiralSvgWrapperInner.classList.add(\"SvgWrapper-inner--invert\");\n    } else {\n      spiralSvgWrapperInner.classList.remove(\"SvgWrapper-inner--invert\");\n    }\n  }\n\n  // Redraw vertigo with new options\n  spiral.setOptions(spiralOptions);\n}\n\nconst SPIRAL_OPTIONS_INPUTS = [\n  {\n    callback: spiralOptionsChangeHandler,\n    label: \"Minimum line width\",\n    min: 0,\n    max: 5,\n    name: \"minimumLineWidth\",\n    value: 1,\n    step: 0.5,\n  },\n  {\n    callback: spiralOptionsChangeHandler,\n    label: \"Maximum line width\",\n    min: 1,\n    max: 20,\n    name: \"maximumLineWidth\",\n    value: 5,\n    step: 0.5,\n  },\n  {\n    callback: spiralOptionsChangeHandler,\n    label: \"Distance between lines\",\n    min: 0,\n    max: 10,\n    name: \"distanceBetweenLines\",\n    value: 1,\n    step: 0.5,\n  },\n  {\n    callback: spiralOptionsChangeHandler,\n    label: \"Starting radius\",\n    min: 3,\n    max: 300,\n    name: \"startingRadius\",\n    value: 3,\n    step: 0.5,\n  },\n  {\n    callback: spiralOptionsChangeHandler,\n    label: \"Plotting step\",\n    max: 10,\n    min: 0,\n    name: \"plottingStep\",\n    value: 0,\n    step: 0.5,\n  },\n];\n\nconst SPIRAL_INVERT_INPUT = {\n  callback: spiralOptionsChangeHandler,\n  label: \"Invert colors\",\n  name: \"invert\",\n  value: true,\n};\n\nSPIRAL_OPTIONS_INPUTS.forEach((inputData) => {\n  spiralOptionsDiv.appendChild(createOption(inputData));\n});\n\nspiralOptionsDiv.appendChild(createCheckboxOption(SPIRAL_INVERT_INPUT));\n\n// Create spiral instance\nconst spiral = new VertigoSpiral(spiralOptions);\n\n// Show SVG\nspiralSvgWrapper.appendChild(spiral.svg);\n\n// On file input change convert it\nspiralFileInput.addEventListener(\"change\", () => {\n  const file: File = spiralFileInput.files[0];\n  const imageURL = URL.createObjectURL(file);\n\n  spiral.convertImage(imageURL);\n});\n\n// Download SVG\nspiralDownloadButton.addEventListener(\"click\", () => downloadSVG(spiral, \"spiral\"));\n\n// Convert hello image on load\nspiral.convertImage(helloImage.getAttribute(\"src\"));\n\n// --------- TEST IMAGES\n\nconst testImagesElements: NodeListOf<HTMLImageElement> = document.querySelectorAll(\".TestImageButton\");\n\n// Connect buttons to draw test images\n// IE can't forEach through NodeList\n// so we need to call Array.prototype.slice\nArray.prototype.slice.call(testImagesElements).forEach((button) => {\n  button.addEventListener(\"click\", (e) => {\n    const image = document.querySelector(e.target.getAttribute(\"data-image\"));\n    const imageURL = image.getAttribute(\"src\");\n    const type = e.target.getAttribute(\"data-type\");\n\n    if (type === \"dots\") {\n      vertigo.convertImage(imageURL);\n    } else {\n      spiral.convertImage(imageURL);\n    }\n  });\n});\n"],
  "mappings": "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",
  "names": []
}
