{"version":3,"sources":["src/constants.ts","src/vertigo.ts","src/helpers.ts","src/convert-image.ts","index.ts"],"names":[],"mappings":"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","file":"vertigo.75d4e9d1.js","sourceRoot":"..","sourcesContent":["// How many dots are added with each concentric circle\nexport const DOT_INCREMENT_STEP:number = 6;\n\nexport interface IOptions {\n  resolution: number;\n  minimumDotRadius: number;\n  maximumDotRadius: number;\n  distanceBetweenDots: number;\n};\n\nexport interface IOptionsPartial {\n  resolution?: number;\n  minimumDotRadius?: number;\n  maximumDotRadius?: number;\n  distanceBetweenDots?: number;\n};\n\nexport const defaultOptions:IOptions = {\n  // Number of concentric circles\n  resolution: 25,\n  // Minimum dot radius\n  minimumDotRadius: 1,\n  // Maximum dot radius\n  maximumDotRadius: 5,\n  // Distance between dots\n  distanceBetweenDots: 2,\n};\n","import {\n  DOT_INCREMENT_STEP,\n  IOptions,\n  IOptionsPartial,\n  defaultOptions,\n} from './constants';\n\n// TODO\n//\n// * Dynamic dot size\n// * Performance?\n\ninterface IDot {\n  element: SVGCircleElement;\n  x: string;\n  y: string;\n  scale: number;\n};\n\nexport default class Vertigo {\n  private options:IOptions;\n  private dots:IDot[][];\n  private radiusGrowStep:number;\n\n  public svg:SVGElement;\n\n  constructor(options?:IOptionsPartial) {\n    this.options = {\n      ...defaultOptions,\n      ...options,\n    };\n\n    this.radiusGrowStep = this.options.maximumDotRadius * 2 + this.options.distanceBetweenDots;\n\n    const size = this.options.resolution * 2 * this.radiusGrowStep;\n    const svgSize = size + this.options.maximumDotRadius * 2;\n\n    this.svg = Vertigo.createSvg(svgSize);\n\n    this.generateDots();\n  }\n\n  private static createSvg(svgSize:number, className:string = 'Dots'):SVGElement {\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svg.setAttribute('class', className);\n    svg.setAttribute('viewBox', `${ svgSize / -2 } ${ svgSize / -2 } ${ svgSize } ${ svgSize }`);\n    // svg.style.width = svgSize.toString();\n    // svg.style.height = svgSize.toString();\n\n    return svg;\n  }\n\n  private static createDot(x:string, y:string, dotRadius:number, className = 'Dots-dot'):IDot {\n    const dot = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n    dot.setAttribute('class', className);\n    dot.setAttribute('cx', x);\n    dot.setAttribute('cy', y);\n    dot.setAttribute('r', dotRadius.toString());\n\n    return {\n      element: dot,\n      x,\n      y,\n      scale: 1,\n    };\n  }\n\n  private generateDots() {\n    // Create central dot\n    const centralDot = Vertigo.createDot('0', '0', this.options.minimumDotRadius);\n\n    this.dots = [\n      [centralDot],\n    ];\n\n    this.svg.appendChild(centralDot.element);\n\n    for (let i = 1; i <= this.options.resolution; i++) {\n      const r = i * this.radiusGrowStep;\n\n      const dotCount = i * DOT_INCREMENT_STEP;\n      const dotAngleStep = 360 / dotCount;\n\n      this.dots[i] = [];\n\n      for (let j = 0; j < dotCount; j++) {\n        const angle = Math.PI * (dotAngleStep * j) / 180;\n\n        const x = (r * Math.cos(angle)).toFixed(3);\n        const y = (r * Math.sin(angle)).toFixed(3);\n\n        const dot = Vertigo.createDot(x, y, this.options.minimumDotRadius);\n\n        this.dots[i].push(dot);\n\n        this.svg.appendChild(dot.element);\n      }\n    }\n  }\n\n  public drawImage(image:any[]) { // TODO types\n    image.forEach((dots:any[], i:number) => { // TODO types\n      dots.forEach((dotScale:number, j:number) => {\n        const circle = this.dots[i];\n\n        if (circle) {\n          const dot = circle[j];\n\n          if (dot.scale !== dotScale) {\n            dot.scale = dotScale;\n\n            dot.element.setAttribute('r', dotScale.toString());\n          }\n        }\n      });\n    });\n  }\n\n  private removeDots() {\n    this.dots.forEach(circle => {\n      circle.forEach(dot => {\n        dot.element.remove();\n      });\n    });\n  }\n\n  public setOptions(options:IOptionsPartial) {\n    this.options = {\n      ...defaultOptions,\n      ...options,\n    };\n\n    this.radiusGrowStep = this.options.maximumDotRadius * 2 + this.options.distanceBetweenDots;\n\n    const size = this.options.resolution * 2 * this.radiusGrowStep;\n    const svgSize = size + this.options.maximumDotRadius * 2;\n\n    // Update svg size\n    this.svg.setAttribute('viewBox', `${ svgSize / -2 } ${ svgSize / -2 } ${ svgSize } ${ svgSize }`);\n\n    this.removeDots();\n    this.generateDots();\n  }\n}\n","export function toFixed(number:number, numberOfDecimalSpaces:number = 2):number {\n  return parseFloat(number.toFixed(numberOfDecimalSpaces));\n}\n","import { toFixed } from './helpers';\nimport {\n  DOT_INCREMENT_STEP,\n  IOptions,\n  IOptionsPartial,\n  defaultOptions,\n} from './constants';\n\nfunction mapRange(value:number, inputRange:number, outputMin:number, outputMax:number) {\n  const outputRange = outputMax - outputMin;\n  return value / inputRange * outputRange + outputMin;\n}\n\nfunction getRectCornerFromCenter(r, angle, rectWidth, size) {\n  const rectCenterX = r * Math.cos(angle);\n  const rectCenterY = r * Math.sin(angle);\n\n  const x = rectCenterX - (rectWidth / 2) + (size / 2);\n  const y = rectCenterY - (rectWidth / 2) + (size / 2);\n\n  return {\n    x,\n    y,\n  };\n}\n\nfunction getRectBrightness(ctx, x, y, rectWidth, minimumDotRadius, maximumDotRadius) {\n  const imageData = ctx.getImageData(x, y, rectWidth, rectWidth);\n\n  let brightness = 0;\n\n  for (let k = 0; k < imageData.data.length; k += 4) {\n      const r = imageData.data[k];\n      const g = imageData.data[k + 1];\n      const b = imageData.data[k + 2];\n      const a = imageData.data[k + 3];\n\n      brightness += 0.299 * r + 0.587 * g + 0.114 * b;\n  }\n\n  const COLORS_COUNT = 4; // r g b a\n  brightness = brightness / (imageData.data.length / COLORS_COUNT);\n\n  const circleSize = mapRange(brightness, 255, minimumDotRadius, maximumDotRadius);\n\n  return toFixed(circleSize, 2);\n}\n\n// TODO low res\n// if (brightness < 100) {\n//   convertedImage[i][j] = 1;\n// } else if (brightness < 200) {\n//   convertedImage[i][j] = 2;\n// } else {\n//   convertedImage[i][j] = 4;\n// }\n\nexport default function convertImage(\n  imageSrc:string,\n  userOptions:IOptionsPartial,\n  callback:(convertedImage:number[][]) => void\n) {\n  const size = 500;\n  const canvas:HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = size;\n  canvas.height = size;\n\n  const ctx:CanvasRenderingContext2D = canvas.getContext('2d');\n\n  const image = new Image();\n\n  const options:IOptions = {\n    ...defaultOptions,\n    ...userOptions,\n  };\n\n  image.addEventListener('load', () => {\n    // Get the largest square from the image\n    let yOffset = 0;\n    let xOffset = 0;\n    let imageSize;\n\n    if (image.height > image.width) {\n      yOffset = (image.height - image.width) / 2;\n      imageSize = image.width;\n    } else {\n      xOffset = (image.width - image.height) / 2;\n      imageSize = image.height;\n    }\n\n    ctx.drawImage(image, xOffset, yOffset, imageSize, imageSize, 0, 0, size, size);\n\n    // const body:any = document.querySelector('body');\n    // body.appendChild(canvas);\n\n    const convertedImage:number[][] = [[]];\n    const rectWidth = size / 2 / (options.resolution + 0.5);\n\n    const helperRectangles = [];\n\n    const { x, y } = getRectCornerFromCenter(0, 0, rectWidth, size);\n    convertedImage[0][0] = getRectBrightness(ctx, x, y, rectWidth, options.minimumDotRadius, options.maximumDotRadius);\n    helperRectangles.push({ x, y })\n\n    for (let i = 1; i <= options.resolution; i++) {\n      const r = i * rectWidth;\n\n      const dotCount = i * DOT_INCREMENT_STEP;\n      const dotAngleStep = 360 / dotCount;\n\n      convertedImage[i] = [];\n\n      for (let j = 0; j < dotCount; j++) {\n        const angle = Math.PI * (dotAngleStep * j) / 180;\n\n        const { x, y } = getRectCornerFromCenter(r, angle, rectWidth, size);\n        convertedImage[i][j] = getRectBrightness(ctx, x, y, rectWidth, options.minimumDotRadius, options.maximumDotRadius);\n\n        helperRectangles.push({ x, y });\n      }\n    }\n\n    callback(convertedImage);\n    // console.log(JSON.stringify(convertedImage))\n\n    ctx.strokeStyle = 'orange';\n\n    helperRectangles.forEach(rect => {\n      ctx.strokeRect(rect.x, rect.y, rectWidth, rectWidth);\n    });\n  });\n\n  image.src = imageSrc;\n}\n","import Vertigo from './src/vertigo';\n// import generateRandomImage from './src/generate-random-image';\nimport convertImage from './src/convert-image';\nimport { defaultOptions } from './src/constants';\n\n\nconst svgWrapperInner:HTMLElement = document.querySelector('.SvgWrapper-svg');\nconst helloImage:HTMLElement = document.querySelector('.TestImage--hello');\nconst vertigoFileInput:HTMLInputElement = document.querySelector('.App-fileInput');\n\nconst downloadButton:HTMLAnchorElement = document.querySelector('.Button--download');\n\nconst options = {};\nconst optionInputs = [];\n\nlet lastImageDrawn = null;\n\nfunction setOptions() {\n  optionInputs.forEach(optionInput => {\n    options[optionInput.key] = parseInt(optionInput.input.value, 10);\n  });\n\n  return options;\n}\n\nObject.keys(defaultOptions).forEach(key => {\n  const input:HTMLElement = document.querySelector(`.App-optionsInput--${ key }`);\n\n  input.addEventListener('change', (e:Event) => {\n    setOptions();\n    vertigo.setOptions(options);\n\n    e.target.nextElementSibling.innerHTML = e.target.value;\n\n    if (lastImageDrawn) {\n      convertImage(lastImageDrawn, options, convertedImage => {\n        vertigo.drawImage(convertedImage);\n        downloadButton.href = `data:application/octet-stream;base64,${ btoa(svgWrapperInner.innerHTML) }`;\n      });\n    }\n  });\n\n  optionInputs.push({\n    key,\n    input,\n  });\n});\n\n// Set initial options\nsetOptions();\n\ndocument.querySelectorAll('.TestImageButton').forEach(button => {\n  button.addEventListener('click', e => {\n    const image = document.querySelector(e.target.getAttribute('data-image'));\n\n    const imageURL = image.getAttribute('src');\n\n    convertImage(imageURL, options, convertedImage => {\n      vertigo.drawImage(convertedImage);\n      lastImageDrawn = imageURL;\n      downloadButton.href = `data:application/octet-stream;base64,${ btoa(svgWrapperInner.innerHTML) }`;\n    });\n  });\n});\n\nconst vertigo = new Vertigo(options);\n\nsvgWrapperInner.appendChild(vertigo.svg);\n\nvertigoFileInput.addEventListener('change', () => {\n  const file:File = vertigoFileInput.files[0];\n  const imageURL = URL.createObjectURL(file);\n\n  convertImage(imageURL, options, convertedImage => {\n    vertigo.drawImage(convertedImage);\n    lastImageDrawn = imageURL;\n    downloadButton.href = `data:application/octet-stream;base64,${ btoa(svgWrapperInner.innerHTML) }`;\n  });\n});\n\nconst imageURL = helloImage.getAttribute('src');\n\nconvertImage(imageURL, options, convertedImage => {\n  vertigo.drawImage(convertedImage);\n  lastImageDrawn = imageURL;\n  downloadButton.href = `data:application/octet-stream;base64,${ btoa(svgWrapperInner.innerHTML) }`;\n});\n\n// setInterval(() => {\n//   vertigo.drawImage(generateRandomImage(resolution));\n// }, 1000);\n\n// vertigo.drawImage(helloImage);\n\n// setTimeout(() => {\n//   vertigo.drawImage(circleImage);\n// }, 3000);\n\n\n// noUiSlider.create(document.querySelector('.slider'), {\n//   start: [25],\n//   range: {\n//     'min': [5],\n//     'max': [50],\n//   },\n//   step: 1,\n//   tooltips: true,\n//   format: {\n//     to: function (value) {\n//       return parseInt(value);\n//     },\n//     from: function (value) {\n//       return value;\n//     },\n//   }\n// });\n"]}